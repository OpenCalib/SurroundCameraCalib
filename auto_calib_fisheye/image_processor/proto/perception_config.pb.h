// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_perception_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_perception_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_perception_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_perception_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_perception_5fconfig_2eproto;
class ImageProcessorConfig;
struct ImageProcessorConfigDefaultTypeInternal;
extern ImageProcessorConfigDefaultTypeInternal _ImageProcessorConfig_default_instance_;
class PerceptionConfig;
struct PerceptionConfigDefaultTypeInternal;
extern PerceptionConfigDefaultTypeInternal _PerceptionConfig_default_instance_;
class SpaceDetectorConfig;
struct SpaceDetectorConfigDefaultTypeInternal;
extern SpaceDetectorConfigDefaultTypeInternal _SpaceDetectorConfig_default_instance_;
class USSHandlerConfig;
struct USSHandlerConfigDefaultTypeInternal;
extern USSHandlerConfigDefaultTypeInternal _USSHandlerConfig_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ImageProcessorConfig* Arena::CreateMaybeMessage<::ImageProcessorConfig>(Arena*);
template<> ::PerceptionConfig* Arena::CreateMaybeMessage<::PerceptionConfig>(Arena*);
template<> ::SpaceDetectorConfig* Arena::CreateMaybeMessage<::SpaceDetectorConfig>(Arena*);
template<> ::USSHandlerConfig* Arena::CreateMaybeMessage<::USSHandlerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ImageProcessorConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageProcessorConfig) */ {
 public:
  inline ImageProcessorConfig() : ImageProcessorConfig(nullptr) {}
  ~ImageProcessorConfig() override;
  explicit PROTOBUF_CONSTEXPR ImageProcessorConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageProcessorConfig(const ImageProcessorConfig& from);
  ImageProcessorConfig(ImageProcessorConfig&& from) noexcept
    : ImageProcessorConfig() {
    *this = ::std::move(from);
  }

  inline ImageProcessorConfig& operator=(const ImageProcessorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageProcessorConfig& operator=(ImageProcessorConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageProcessorConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageProcessorConfig* internal_default_instance() {
    return reinterpret_cast<const ImageProcessorConfig*>(
               &_ImageProcessorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageProcessorConfig& a, ImageProcessorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageProcessorConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageProcessorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageProcessorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageProcessorConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageProcessorConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageProcessorConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageProcessorConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageProcessorConfig";
  }
  protected:
  explicit ImageProcessorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFragShaderFieldNumber = 1,
    kVertShaderFieldNumber = 2,
    kSegFragShaderFieldNumber = 3,
    kSegVertShaderFieldNumber = 4,
    kModelNameFieldNumber = 5,
    kTextureTvImage0FieldNumber = 6,
    kTextureTvImage1FieldNumber = 7,
    kTextureTvImage2FieldNumber = 8,
    kTextureTvImage3FieldNumber = 9,
    kCalibInfo0FieldNumber = 10,
    kCalibInfo1FieldNumber = 11,
    kCalibInfo2FieldNumber = 12,
    kCalibInfo3FieldNumber = 13,
    kCalibDirFieldNumber = 17,
    kCudaEnabledFieldNumber = 18,
    kMinDiffThreshFieldNumber = 14,
    kQueueSizeFieldNumber = 15,
    kCachedIndicesFieldNumber = 16,
  };
  // optional string frag_shader = 1 [default = "data/perception/calibs/simulation/BowlFragShader_16_18.fsh"];
  bool has_frag_shader() const;
  private:
  bool _internal_has_frag_shader() const;
  public:
  void clear_frag_shader();
  const std::string& frag_shader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frag_shader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frag_shader();
  PROTOBUF_NODISCARD std::string* release_frag_shader();
  void set_allocated_frag_shader(std::string* frag_shader);
  private:
  const std::string& _internal_frag_shader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frag_shader(const std::string& value);
  std::string* _internal_mutable_frag_shader();
  public:

  // optional string vert_shader = 2 [default = "data/perception/calibs/simulation/BowlVertShader_16_18.vsh"];
  bool has_vert_shader() const;
  private:
  bool _internal_has_vert_shader() const;
  public:
  void clear_vert_shader();
  const std::string& vert_shader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vert_shader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vert_shader();
  PROTOBUF_NODISCARD std::string* release_vert_shader();
  void set_allocated_vert_shader(std::string* vert_shader);
  private:
  const std::string& _internal_vert_shader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vert_shader(const std::string& value);
  std::string* _internal_mutable_vert_shader();
  public:

  // optional string seg_frag_shader = 3 [default = "data/perception/calibs/simulation/SegmentTopView.fsh"];
  bool has_seg_frag_shader() const;
  private:
  bool _internal_has_seg_frag_shader() const;
  public:
  void clear_seg_frag_shader();
  const std::string& seg_frag_shader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seg_frag_shader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seg_frag_shader();
  PROTOBUF_NODISCARD std::string* release_seg_frag_shader();
  void set_allocated_seg_frag_shader(std::string* seg_frag_shader);
  private:
  const std::string& _internal_seg_frag_shader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seg_frag_shader(const std::string& value);
  std::string* _internal_mutable_seg_frag_shader();
  public:

  // optional string seg_vert_shader = 4 [default = "data/perception/calibs/simulation/SegmentTopView.vsh"];
  bool has_seg_vert_shader() const;
  private:
  bool _internal_has_seg_vert_shader() const;
  public:
  void clear_seg_vert_shader();
  const std::string& seg_vert_shader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seg_vert_shader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seg_vert_shader();
  PROTOBUF_NODISCARD std::string* release_seg_vert_shader();
  void set_allocated_seg_vert_shader(std::string* seg_vert_shader);
  private:
  const std::string& _internal_seg_vert_shader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seg_vert_shader(const std::string& value);
  std::string* _internal_mutable_seg_vert_shader();
  public:

  // optional string model_name = 5 [default = "data/perception/calibs/simulation/Bowl_topview_ver1_16_18.obj"];
  bool has_model_name() const;
  private:
  bool _internal_has_model_name() const;
  public:
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // optional string texture_tv_image_0 = 6 [default = "data/perception/calibs/simulation/alpha_TV_0.png"];
  bool has_texture_tv_image_0() const;
  private:
  bool _internal_has_texture_tv_image_0() const;
  public:
  void clear_texture_tv_image_0();
  const std::string& texture_tv_image_0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_texture_tv_image_0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_texture_tv_image_0();
  PROTOBUF_NODISCARD std::string* release_texture_tv_image_0();
  void set_allocated_texture_tv_image_0(std::string* texture_tv_image_0);
  private:
  const std::string& _internal_texture_tv_image_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_texture_tv_image_0(const std::string& value);
  std::string* _internal_mutable_texture_tv_image_0();
  public:

  // optional string texture_tv_image_1 = 7 [default = "data/perception/calibs/simulation/alpha_TV_1.png"];
  bool has_texture_tv_image_1() const;
  private:
  bool _internal_has_texture_tv_image_1() const;
  public:
  void clear_texture_tv_image_1();
  const std::string& texture_tv_image_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_texture_tv_image_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_texture_tv_image_1();
  PROTOBUF_NODISCARD std::string* release_texture_tv_image_1();
  void set_allocated_texture_tv_image_1(std::string* texture_tv_image_1);
  private:
  const std::string& _internal_texture_tv_image_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_texture_tv_image_1(const std::string& value);
  std::string* _internal_mutable_texture_tv_image_1();
  public:

  // optional string texture_tv_image_2 = 8 [default = "data/perception/calibs/simulation/alpha_TV_2.png"];
  bool has_texture_tv_image_2() const;
  private:
  bool _internal_has_texture_tv_image_2() const;
  public:
  void clear_texture_tv_image_2();
  const std::string& texture_tv_image_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_texture_tv_image_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_texture_tv_image_2();
  PROTOBUF_NODISCARD std::string* release_texture_tv_image_2();
  void set_allocated_texture_tv_image_2(std::string* texture_tv_image_2);
  private:
  const std::string& _internal_texture_tv_image_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_texture_tv_image_2(const std::string& value);
  std::string* _internal_mutable_texture_tv_image_2();
  public:

  // optional string texture_tv_image_3 = 9 [default = "data/perception/calibs/simulation/alpha_TV_3.png"];
  bool has_texture_tv_image_3() const;
  private:
  bool _internal_has_texture_tv_image_3() const;
  public:
  void clear_texture_tv_image_3();
  const std::string& texture_tv_image_3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_texture_tv_image_3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_texture_tv_image_3();
  PROTOBUF_NODISCARD std::string* release_texture_tv_image_3();
  void set_allocated_texture_tv_image_3(std::string* texture_tv_image_3);
  private:
  const std::string& _internal_texture_tv_image_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_texture_tv_image_3(const std::string& value);
  std::string* _internal_mutable_texture_tv_image_3();
  public:

  // optional string calib_info_0 = 10 [default = "data/perception/calibs/simulation/calib_cam0_topview.txt"];
  bool has_calib_info_0() const;
  private:
  bool _internal_has_calib_info_0() const;
  public:
  void clear_calib_info_0();
  const std::string& calib_info_0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_calib_info_0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_calib_info_0();
  PROTOBUF_NODISCARD std::string* release_calib_info_0();
  void set_allocated_calib_info_0(std::string* calib_info_0);
  private:
  const std::string& _internal_calib_info_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_calib_info_0(const std::string& value);
  std::string* _internal_mutable_calib_info_0();
  public:

  // optional string calib_info_1 = 11 [default = "data/perception/calibs/simulation/calib_cam1_topview.txt"];
  bool has_calib_info_1() const;
  private:
  bool _internal_has_calib_info_1() const;
  public:
  void clear_calib_info_1();
  const std::string& calib_info_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_calib_info_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_calib_info_1();
  PROTOBUF_NODISCARD std::string* release_calib_info_1();
  void set_allocated_calib_info_1(std::string* calib_info_1);
  private:
  const std::string& _internal_calib_info_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_calib_info_1(const std::string& value);
  std::string* _internal_mutable_calib_info_1();
  public:

  // optional string calib_info_2 = 12 [default = "data/perception/calibs/simulation/calib_cam2_topview.txt"];
  bool has_calib_info_2() const;
  private:
  bool _internal_has_calib_info_2() const;
  public:
  void clear_calib_info_2();
  const std::string& calib_info_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_calib_info_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_calib_info_2();
  PROTOBUF_NODISCARD std::string* release_calib_info_2();
  void set_allocated_calib_info_2(std::string* calib_info_2);
  private:
  const std::string& _internal_calib_info_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_calib_info_2(const std::string& value);
  std::string* _internal_mutable_calib_info_2();
  public:

  // optional string calib_info_3 = 13 [default = "data/perception/calibs/simulation/calib_cam3_topview.txt"];
  bool has_calib_info_3() const;
  private:
  bool _internal_has_calib_info_3() const;
  public:
  void clear_calib_info_3();
  const std::string& calib_info_3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_calib_info_3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_calib_info_3();
  PROTOBUF_NODISCARD std::string* release_calib_info_3();
  void set_allocated_calib_info_3(std::string* calib_info_3);
  private:
  const std::string& _internal_calib_info_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_calib_info_3(const std::string& value);
  std::string* _internal_mutable_calib_info_3();
  public:

  // optional string calib_dir = 17 [default = "data/perception/calibs/simulation/"];
  bool has_calib_dir() const;
  private:
  bool _internal_has_calib_dir() const;
  public:
  void clear_calib_dir();
  const std::string& calib_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_calib_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_calib_dir();
  PROTOBUF_NODISCARD std::string* release_calib_dir();
  void set_allocated_calib_dir(std::string* calib_dir);
  private:
  const std::string& _internal_calib_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_calib_dir(const std::string& value);
  std::string* _internal_mutable_calib_dir();
  public:

  // optional bool cuda_enabled = 18 [default = false];
  bool has_cuda_enabled() const;
  private:
  bool _internal_has_cuda_enabled() const;
  public:
  void clear_cuda_enabled();
  bool cuda_enabled() const;
  void set_cuda_enabled(bool value);
  private:
  bool _internal_cuda_enabled() const;
  void _internal_set_cuda_enabled(bool value);
  public:

  // optional int64 min_diff_thresh = 14 [default = 10];
  bool has_min_diff_thresh() const;
  private:
  bool _internal_has_min_diff_thresh() const;
  public:
  void clear_min_diff_thresh();
  int64_t min_diff_thresh() const;
  void set_min_diff_thresh(int64_t value);
  private:
  int64_t _internal_min_diff_thresh() const;
  void _internal_set_min_diff_thresh(int64_t value);
  public:

  // optional int32 queue_size = 15 [default = 5];
  bool has_queue_size() const;
  private:
  bool _internal_has_queue_size() const;
  public:
  void clear_queue_size();
  int32_t queue_size() const;
  void set_queue_size(int32_t value);
  private:
  int32_t _internal_queue_size() const;
  void _internal_set_queue_size(int32_t value);
  public:

  // optional int32 cached_indices = 16 [default = 1];
  bool has_cached_indices() const;
  private:
  bool _internal_has_cached_indices() const;
  public:
  void clear_cached_indices();
  int32_t cached_indices() const;
  void set_cached_indices(int32_t value);
  private:
  int32_t _internal_cached_indices() const;
  void _internal_set_cached_indices(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ImageProcessorConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_frag_shader_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frag_shader_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_vert_shader_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vert_shader_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_seg_frag_shader_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seg_frag_shader_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_seg_vert_shader_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seg_vert_shader_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_texture_tv_image_0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texture_tv_image_0_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_texture_tv_image_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texture_tv_image_1_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_texture_tv_image_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texture_tv_image_2_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_texture_tv_image_3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texture_tv_image_3_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_calib_info_0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calib_info_0_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_calib_info_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calib_info_1_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_calib_info_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calib_info_2_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_calib_info_3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calib_info_3_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_calib_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calib_dir_;
  bool cuda_enabled_;
  int64_t min_diff_thresh_;
  int32_t queue_size_;
  int32_t cached_indices_;
  friend struct ::TableStruct_perception_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SpaceDetectorConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SpaceDetectorConfig) */ {
 public:
  inline SpaceDetectorConfig() : SpaceDetectorConfig(nullptr) {}
  ~SpaceDetectorConfig() override;
  explicit PROTOBUF_CONSTEXPR SpaceDetectorConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpaceDetectorConfig(const SpaceDetectorConfig& from);
  SpaceDetectorConfig(SpaceDetectorConfig&& from) noexcept
    : SpaceDetectorConfig() {
    *this = ::std::move(from);
  }

  inline SpaceDetectorConfig& operator=(const SpaceDetectorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpaceDetectorConfig& operator=(SpaceDetectorConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpaceDetectorConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpaceDetectorConfig* internal_default_instance() {
    return reinterpret_cast<const SpaceDetectorConfig*>(
               &_SpaceDetectorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpaceDetectorConfig& a, SpaceDetectorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SpaceDetectorConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpaceDetectorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpaceDetectorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpaceDetectorConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpaceDetectorConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpaceDetectorConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpaceDetectorConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SpaceDetectorConfig";
  }
  protected:
  explicit SpaceDetectorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelPathFieldNumber = 1,
    kCameraJsonDataFieldNumber = 2,
    kAlphaFrontFieldNumber = 3,
    kAlphaRearFieldNumber = 4,
    kRoiMaskFrontFieldNumber = 5,
    kRoiMaskRearFieldNumber = 6,
    kRoiMaskLeftFieldNumber = 7,
    kRoiMaskRightFieldNumber = 8,
  };
  // optional string model_path = 1 [default = "data/perception/model_weights/"];
  bool has_model_path() const;
  private:
  bool _internal_has_model_path() const;
  public:
  void clear_model_path();
  const std::string& model_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_path();
  PROTOBUF_NODISCARD std::string* release_model_path();
  void set_allocated_model_path(std::string* model_path);
  private:
  const std::string& _internal_model_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_path(const std::string& value);
  std::string* _internal_mutable_model_path();
  public:

  // optional string camera_json_data = 2 [default = "data/perception/calibs/simulation/cameraData.json"];
  bool has_camera_json_data() const;
  private:
  bool _internal_has_camera_json_data() const;
  public:
  void clear_camera_json_data();
  const std::string& camera_json_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camera_json_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camera_json_data();
  PROTOBUF_NODISCARD std::string* release_camera_json_data();
  void set_allocated_camera_json_data(std::string* camera_json_data);
  private:
  const std::string& _internal_camera_json_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camera_json_data(const std::string& value);
  std::string* _internal_mutable_camera_json_data();
  public:

  // optional string alpha_front = 3 [default = "data/perception/calibs/simulation/alpha_1.png"];
  bool has_alpha_front() const;
  private:
  bool _internal_has_alpha_front() const;
  public:
  void clear_alpha_front();
  const std::string& alpha_front() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alpha_front(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alpha_front();
  PROTOBUF_NODISCARD std::string* release_alpha_front();
  void set_allocated_alpha_front(std::string* alpha_front);
  private:
  const std::string& _internal_alpha_front() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alpha_front(const std::string& value);
  std::string* _internal_mutable_alpha_front();
  public:

  // optional string alpha_rear = 4 [default = "data/perception/calibs/simulation/alpha_2.png"];
  bool has_alpha_rear() const;
  private:
  bool _internal_has_alpha_rear() const;
  public:
  void clear_alpha_rear();
  const std::string& alpha_rear() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alpha_rear(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alpha_rear();
  PROTOBUF_NODISCARD std::string* release_alpha_rear();
  void set_allocated_alpha_rear(std::string* alpha_rear);
  private:
  const std::string& _internal_alpha_rear() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alpha_rear(const std::string& value);
  std::string* _internal_mutable_alpha_rear();
  public:

  // optional string roi_mask_front = 5 [default = "data/perception/calibs/simulation/roi_mask_1.png"];
  bool has_roi_mask_front() const;
  private:
  bool _internal_has_roi_mask_front() const;
  public:
  void clear_roi_mask_front();
  const std::string& roi_mask_front() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roi_mask_front(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roi_mask_front();
  PROTOBUF_NODISCARD std::string* release_roi_mask_front();
  void set_allocated_roi_mask_front(std::string* roi_mask_front);
  private:
  const std::string& _internal_roi_mask_front() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roi_mask_front(const std::string& value);
  std::string* _internal_mutable_roi_mask_front();
  public:

  // optional string roi_mask_rear = 6 [default = "data/perception/calibs/simulation/roi_mask_2.png"];
  bool has_roi_mask_rear() const;
  private:
  bool _internal_has_roi_mask_rear() const;
  public:
  void clear_roi_mask_rear();
  const std::string& roi_mask_rear() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roi_mask_rear(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roi_mask_rear();
  PROTOBUF_NODISCARD std::string* release_roi_mask_rear();
  void set_allocated_roi_mask_rear(std::string* roi_mask_rear);
  private:
  const std::string& _internal_roi_mask_rear() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roi_mask_rear(const std::string& value);
  std::string* _internal_mutable_roi_mask_rear();
  public:

  // optional string roi_mask_left = 7 [default = "data/perception/calibs/simulation/roi_mask_0.png"];
  bool has_roi_mask_left() const;
  private:
  bool _internal_has_roi_mask_left() const;
  public:
  void clear_roi_mask_left();
  const std::string& roi_mask_left() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roi_mask_left(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roi_mask_left();
  PROTOBUF_NODISCARD std::string* release_roi_mask_left();
  void set_allocated_roi_mask_left(std::string* roi_mask_left);
  private:
  const std::string& _internal_roi_mask_left() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roi_mask_left(const std::string& value);
  std::string* _internal_mutable_roi_mask_left();
  public:

  // optional string roi_mask_right = 8 [default = "data/perception/calibs/simulation/roi_mask_3.png"];
  bool has_roi_mask_right() const;
  private:
  bool _internal_has_roi_mask_right() const;
  public:
  void clear_roi_mask_right();
  const std::string& roi_mask_right() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roi_mask_right(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roi_mask_right();
  PROTOBUF_NODISCARD std::string* release_roi_mask_right();
  void set_allocated_roi_mask_right(std::string* roi_mask_right);
  private:
  const std::string& _internal_roi_mask_right() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roi_mask_right(const std::string& value);
  std::string* _internal_mutable_roi_mask_right();
  public:

  // @@protoc_insertion_point(class_scope:SpaceDetectorConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_model_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_path_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_camera_json_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_json_data_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_alpha_front_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alpha_front_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_alpha_rear_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alpha_rear_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_roi_mask_front_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roi_mask_front_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_roi_mask_rear_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roi_mask_rear_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_roi_mask_left_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roi_mask_left_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_roi_mask_right_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roi_mask_right_;
  friend struct ::TableStruct_perception_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class USSHandlerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USSHandlerConfig) */ {
 public:
  inline USSHandlerConfig() : USSHandlerConfig(nullptr) {}
  ~USSHandlerConfig() override;
  explicit PROTOBUF_CONSTEXPR USSHandlerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  USSHandlerConfig(const USSHandlerConfig& from);
  USSHandlerConfig(USSHandlerConfig&& from) noexcept
    : USSHandlerConfig() {
    *this = ::std::move(from);
  }

  inline USSHandlerConfig& operator=(const USSHandlerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline USSHandlerConfig& operator=(USSHandlerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const USSHandlerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const USSHandlerConfig* internal_default_instance() {
    return reinterpret_cast<const USSHandlerConfig*>(
               &_USSHandlerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(USSHandlerConfig& a, USSHandlerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(USSHandlerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USSHandlerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  USSHandlerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<USSHandlerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const USSHandlerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const USSHandlerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USSHandlerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USSHandlerConfig";
  }
  protected:
  explicit USSHandlerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCachedIndicesFieldNumber = 4,
    kMinDiffThreshFieldNumber = 2,
    kNumTopicsFieldNumber = 1,
    kQueueSizeFieldNumber = 3,
  };
  // optional int32 cached_indices = 4 [default = 1];
  bool has_cached_indices() const;
  private:
  bool _internal_has_cached_indices() const;
  public:
  void clear_cached_indices();
  int32_t cached_indices() const;
  void set_cached_indices(int32_t value);
  private:
  int32_t _internal_cached_indices() const;
  void _internal_set_cached_indices(int32_t value);
  public:

  // optional int64 min_diff_thresh = 2 [default = 10];
  bool has_min_diff_thresh() const;
  private:
  bool _internal_has_min_diff_thresh() const;
  public:
  void clear_min_diff_thresh();
  int64_t min_diff_thresh() const;
  void set_min_diff_thresh(int64_t value);
  private:
  int64_t _internal_min_diff_thresh() const;
  void _internal_set_min_diff_thresh(int64_t value);
  public:

  // optional int32 num_topics = 1 [default = 12];
  bool has_num_topics() const;
  private:
  bool _internal_has_num_topics() const;
  public:
  void clear_num_topics();
  int32_t num_topics() const;
  void set_num_topics(int32_t value);
  private:
  int32_t _internal_num_topics() const;
  void _internal_set_num_topics(int32_t value);
  public:

  // optional int32 queue_size = 3 [default = 5];
  bool has_queue_size() const;
  private:
  bool _internal_has_queue_size() const;
  public:
  void clear_queue_size();
  int32_t queue_size() const;
  void set_queue_size(int32_t value);
  private:
  int32_t _internal_queue_size() const;
  void _internal_set_queue_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:USSHandlerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t cached_indices_;
  int64_t min_diff_thresh_;
  int32_t num_topics_;
  int32_t queue_size_;
  friend struct ::TableStruct_perception_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PerceptionConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PerceptionConfig) */ {
 public:
  inline PerceptionConfig() : PerceptionConfig(nullptr) {}
  ~PerceptionConfig() override;
  explicit PROTOBUF_CONSTEXPR PerceptionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerceptionConfig(const PerceptionConfig& from);
  PerceptionConfig(PerceptionConfig&& from) noexcept
    : PerceptionConfig() {
    *this = ::std::move(from);
  }

  inline PerceptionConfig& operator=(const PerceptionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerceptionConfig& operator=(PerceptionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerceptionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerceptionConfig* internal_default_instance() {
    return reinterpret_cast<const PerceptionConfig*>(
               &_PerceptionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PerceptionConfig& a, PerceptionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PerceptionConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerceptionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerceptionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerceptionConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerceptionConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PerceptionConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PerceptionConfig";
  }
  protected:
  explicit PerceptionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgprocConfigFieldNumber = 1,
    kSpdetConfigFieldNumber = 2,
    kUsshandlerConfigFieldNumber = 3,
    kOdEnabledFieldNumber = 4,
    kUssEnabledFieldNumber = 5,
    kOd3DEnabledFieldNumber = 6,
  };
  // optional .ImageProcessorConfig imgproc_config = 1;
  bool has_imgproc_config() const;
  private:
  bool _internal_has_imgproc_config() const;
  public:
  void clear_imgproc_config();
  const ::ImageProcessorConfig& imgproc_config() const;
  PROTOBUF_NODISCARD ::ImageProcessorConfig* release_imgproc_config();
  ::ImageProcessorConfig* mutable_imgproc_config();
  void set_allocated_imgproc_config(::ImageProcessorConfig* imgproc_config);
  private:
  const ::ImageProcessorConfig& _internal_imgproc_config() const;
  ::ImageProcessorConfig* _internal_mutable_imgproc_config();
  public:
  void unsafe_arena_set_allocated_imgproc_config(
      ::ImageProcessorConfig* imgproc_config);
  ::ImageProcessorConfig* unsafe_arena_release_imgproc_config();

  // optional .SpaceDetectorConfig spdet_config = 2;
  bool has_spdet_config() const;
  private:
  bool _internal_has_spdet_config() const;
  public:
  void clear_spdet_config();
  const ::SpaceDetectorConfig& spdet_config() const;
  PROTOBUF_NODISCARD ::SpaceDetectorConfig* release_spdet_config();
  ::SpaceDetectorConfig* mutable_spdet_config();
  void set_allocated_spdet_config(::SpaceDetectorConfig* spdet_config);
  private:
  const ::SpaceDetectorConfig& _internal_spdet_config() const;
  ::SpaceDetectorConfig* _internal_mutable_spdet_config();
  public:
  void unsafe_arena_set_allocated_spdet_config(
      ::SpaceDetectorConfig* spdet_config);
  ::SpaceDetectorConfig* unsafe_arena_release_spdet_config();

  // optional .USSHandlerConfig usshandler_config = 3;
  bool has_usshandler_config() const;
  private:
  bool _internal_has_usshandler_config() const;
  public:
  void clear_usshandler_config();
  const ::USSHandlerConfig& usshandler_config() const;
  PROTOBUF_NODISCARD ::USSHandlerConfig* release_usshandler_config();
  ::USSHandlerConfig* mutable_usshandler_config();
  void set_allocated_usshandler_config(::USSHandlerConfig* usshandler_config);
  private:
  const ::USSHandlerConfig& _internal_usshandler_config() const;
  ::USSHandlerConfig* _internal_mutable_usshandler_config();
  public:
  void unsafe_arena_set_allocated_usshandler_config(
      ::USSHandlerConfig* usshandler_config);
  ::USSHandlerConfig* unsafe_arena_release_usshandler_config();

  // optional bool od_enabled = 4 [default = false];
  bool has_od_enabled() const;
  private:
  bool _internal_has_od_enabled() const;
  public:
  void clear_od_enabled();
  bool od_enabled() const;
  void set_od_enabled(bool value);
  private:
  bool _internal_od_enabled() const;
  void _internal_set_od_enabled(bool value);
  public:

  // optional bool uss_enabled = 5 [default = false];
  bool has_uss_enabled() const;
  private:
  bool _internal_has_uss_enabled() const;
  public:
  void clear_uss_enabled();
  bool uss_enabled() const;
  void set_uss_enabled(bool value);
  private:
  bool _internal_uss_enabled() const;
  void _internal_set_uss_enabled(bool value);
  public:

  // optional bool od3d_enabled = 6 [default = false];
  bool has_od3d_enabled() const;
  private:
  bool _internal_has_od3d_enabled() const;
  public:
  void clear_od3d_enabled();
  bool od3d_enabled() const;
  void set_od3d_enabled(bool value);
  private:
  bool _internal_od3d_enabled() const;
  void _internal_set_od3d_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PerceptionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ImageProcessorConfig* imgproc_config_;
  ::SpaceDetectorConfig* spdet_config_;
  ::USSHandlerConfig* usshandler_config_;
  bool od_enabled_;
  bool uss_enabled_;
  bool od3d_enabled_;
  friend struct ::TableStruct_perception_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageProcessorConfig

// optional string frag_shader = 1 [default = "data/perception/calibs/simulation/BowlFragShader_16_18.fsh"];
inline bool ImageProcessorConfig::_internal_has_frag_shader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_frag_shader() const {
  return _internal_has_frag_shader();
}
inline void ImageProcessorConfig::clear_frag_shader() {
  frag_shader_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_frag_shader_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageProcessorConfig::frag_shader() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.frag_shader)
  if (frag_shader_.IsDefault()) return _i_give_permission_to_break_this_code_default_frag_shader_.get();
  return _internal_frag_shader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_frag_shader(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 frag_shader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.frag_shader)
}
inline std::string* ImageProcessorConfig::mutable_frag_shader() {
  std::string* _s = _internal_mutable_frag_shader();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.frag_shader)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_frag_shader() const {
  return frag_shader_.Get();
}
inline void ImageProcessorConfig::_internal_set_frag_shader(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  frag_shader_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_frag_shader() {
  _has_bits_[0] |= 0x00000001u;
  return frag_shader_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_frag_shader_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_frag_shader() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.frag_shader)
  if (!_internal_has_frag_shader()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = frag_shader_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_frag_shader(std::string* frag_shader) {
  if (frag_shader != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frag_shader_.SetAllocated(frag_shader, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.frag_shader)
}

// optional string vert_shader = 2 [default = "data/perception/calibs/simulation/BowlVertShader_16_18.vsh"];
inline bool ImageProcessorConfig::_internal_has_vert_shader() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_vert_shader() const {
  return _internal_has_vert_shader();
}
inline void ImageProcessorConfig::clear_vert_shader() {
  vert_shader_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_vert_shader_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ImageProcessorConfig::vert_shader() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.vert_shader)
  if (vert_shader_.IsDefault()) return _i_give_permission_to_break_this_code_default_vert_shader_.get();
  return _internal_vert_shader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_vert_shader(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 vert_shader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.vert_shader)
}
inline std::string* ImageProcessorConfig::mutable_vert_shader() {
  std::string* _s = _internal_mutable_vert_shader();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.vert_shader)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_vert_shader() const {
  return vert_shader_.Get();
}
inline void ImageProcessorConfig::_internal_set_vert_shader(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  vert_shader_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_vert_shader() {
  _has_bits_[0] |= 0x00000002u;
  return vert_shader_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_vert_shader_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_vert_shader() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.vert_shader)
  if (!_internal_has_vert_shader()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = vert_shader_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_vert_shader(std::string* vert_shader) {
  if (vert_shader != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vert_shader_.SetAllocated(vert_shader, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.vert_shader)
}

// optional string seg_frag_shader = 3 [default = "data/perception/calibs/simulation/SegmentTopView.fsh"];
inline bool ImageProcessorConfig::_internal_has_seg_frag_shader() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_seg_frag_shader() const {
  return _internal_has_seg_frag_shader();
}
inline void ImageProcessorConfig::clear_seg_frag_shader() {
  seg_frag_shader_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_seg_frag_shader_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ImageProcessorConfig::seg_frag_shader() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.seg_frag_shader)
  if (seg_frag_shader_.IsDefault()) return _i_give_permission_to_break_this_code_default_seg_frag_shader_.get();
  return _internal_seg_frag_shader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_seg_frag_shader(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 seg_frag_shader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.seg_frag_shader)
}
inline std::string* ImageProcessorConfig::mutable_seg_frag_shader() {
  std::string* _s = _internal_mutable_seg_frag_shader();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.seg_frag_shader)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_seg_frag_shader() const {
  return seg_frag_shader_.Get();
}
inline void ImageProcessorConfig::_internal_set_seg_frag_shader(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  seg_frag_shader_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_seg_frag_shader() {
  _has_bits_[0] |= 0x00000004u;
  return seg_frag_shader_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_seg_frag_shader_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_seg_frag_shader() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.seg_frag_shader)
  if (!_internal_has_seg_frag_shader()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = seg_frag_shader_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_seg_frag_shader(std::string* seg_frag_shader) {
  if (seg_frag_shader != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  seg_frag_shader_.SetAllocated(seg_frag_shader, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.seg_frag_shader)
}

// optional string seg_vert_shader = 4 [default = "data/perception/calibs/simulation/SegmentTopView.vsh"];
inline bool ImageProcessorConfig::_internal_has_seg_vert_shader() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_seg_vert_shader() const {
  return _internal_has_seg_vert_shader();
}
inline void ImageProcessorConfig::clear_seg_vert_shader() {
  seg_vert_shader_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_seg_vert_shader_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ImageProcessorConfig::seg_vert_shader() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.seg_vert_shader)
  if (seg_vert_shader_.IsDefault()) return _i_give_permission_to_break_this_code_default_seg_vert_shader_.get();
  return _internal_seg_vert_shader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_seg_vert_shader(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 seg_vert_shader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.seg_vert_shader)
}
inline std::string* ImageProcessorConfig::mutable_seg_vert_shader() {
  std::string* _s = _internal_mutable_seg_vert_shader();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.seg_vert_shader)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_seg_vert_shader() const {
  return seg_vert_shader_.Get();
}
inline void ImageProcessorConfig::_internal_set_seg_vert_shader(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  seg_vert_shader_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_seg_vert_shader() {
  _has_bits_[0] |= 0x00000008u;
  return seg_vert_shader_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_seg_vert_shader_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_seg_vert_shader() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.seg_vert_shader)
  if (!_internal_has_seg_vert_shader()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = seg_vert_shader_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_seg_vert_shader(std::string* seg_vert_shader) {
  if (seg_vert_shader != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  seg_vert_shader_.SetAllocated(seg_vert_shader, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.seg_vert_shader)
}

// optional string model_name = 5 [default = "data/perception/calibs/simulation/Bowl_topview_ver1_16_18.obj"];
inline bool ImageProcessorConfig::_internal_has_model_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_model_name() const {
  return _internal_has_model_name();
}
inline void ImageProcessorConfig::clear_model_name() {
  model_name_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_model_name_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ImageProcessorConfig::model_name() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.model_name)
  if (model_name_.IsDefault()) return _i_give_permission_to_break_this_code_default_model_name_.get();
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_model_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.model_name)
}
inline std::string* ImageProcessorConfig::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.model_name)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_model_name() const {
  return model_name_.Get();
}
inline void ImageProcessorConfig::_internal_set_model_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_model_name() {
  _has_bits_[0] |= 0x00000010u;
  return model_name_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_model_name_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_model_name() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.model_name)
  if (!_internal_has_model_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = model_name_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  model_name_.SetAllocated(model_name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.model_name)
}

// optional string texture_tv_image_0 = 6 [default = "data/perception/calibs/simulation/alpha_TV_0.png"];
inline bool ImageProcessorConfig::_internal_has_texture_tv_image_0() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_texture_tv_image_0() const {
  return _internal_has_texture_tv_image_0();
}
inline void ImageProcessorConfig::clear_texture_tv_image_0() {
  texture_tv_image_0_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_0_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ImageProcessorConfig::texture_tv_image_0() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.texture_tv_image_0)
  if (texture_tv_image_0_.IsDefault()) return _i_give_permission_to_break_this_code_default_texture_tv_image_0_.get();
  return _internal_texture_tv_image_0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_texture_tv_image_0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 texture_tv_image_0_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.texture_tv_image_0)
}
inline std::string* ImageProcessorConfig::mutable_texture_tv_image_0() {
  std::string* _s = _internal_mutable_texture_tv_image_0();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.texture_tv_image_0)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_texture_tv_image_0() const {
  return texture_tv_image_0_.Get();
}
inline void ImageProcessorConfig::_internal_set_texture_tv_image_0(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  texture_tv_image_0_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_texture_tv_image_0() {
  _has_bits_[0] |= 0x00000020u;
  return texture_tv_image_0_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_0_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_texture_tv_image_0() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.texture_tv_image_0)
  if (!_internal_has_texture_tv_image_0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = texture_tv_image_0_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_texture_tv_image_0(std::string* texture_tv_image_0) {
  if (texture_tv_image_0 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  texture_tv_image_0_.SetAllocated(texture_tv_image_0, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.texture_tv_image_0)
}

// optional string texture_tv_image_1 = 7 [default = "data/perception/calibs/simulation/alpha_TV_1.png"];
inline bool ImageProcessorConfig::_internal_has_texture_tv_image_1() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_texture_tv_image_1() const {
  return _internal_has_texture_tv_image_1();
}
inline void ImageProcessorConfig::clear_texture_tv_image_1() {
  texture_tv_image_1_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_1_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ImageProcessorConfig::texture_tv_image_1() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.texture_tv_image_1)
  if (texture_tv_image_1_.IsDefault()) return _i_give_permission_to_break_this_code_default_texture_tv_image_1_.get();
  return _internal_texture_tv_image_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_texture_tv_image_1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 texture_tv_image_1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.texture_tv_image_1)
}
inline std::string* ImageProcessorConfig::mutable_texture_tv_image_1() {
  std::string* _s = _internal_mutable_texture_tv_image_1();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.texture_tv_image_1)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_texture_tv_image_1() const {
  return texture_tv_image_1_.Get();
}
inline void ImageProcessorConfig::_internal_set_texture_tv_image_1(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  texture_tv_image_1_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_texture_tv_image_1() {
  _has_bits_[0] |= 0x00000040u;
  return texture_tv_image_1_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_1_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_texture_tv_image_1() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.texture_tv_image_1)
  if (!_internal_has_texture_tv_image_1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = texture_tv_image_1_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_texture_tv_image_1(std::string* texture_tv_image_1) {
  if (texture_tv_image_1 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  texture_tv_image_1_.SetAllocated(texture_tv_image_1, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.texture_tv_image_1)
}

// optional string texture_tv_image_2 = 8 [default = "data/perception/calibs/simulation/alpha_TV_2.png"];
inline bool ImageProcessorConfig::_internal_has_texture_tv_image_2() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_texture_tv_image_2() const {
  return _internal_has_texture_tv_image_2();
}
inline void ImageProcessorConfig::clear_texture_tv_image_2() {
  texture_tv_image_2_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_2_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& ImageProcessorConfig::texture_tv_image_2() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.texture_tv_image_2)
  if (texture_tv_image_2_.IsDefault()) return _i_give_permission_to_break_this_code_default_texture_tv_image_2_.get();
  return _internal_texture_tv_image_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_texture_tv_image_2(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 texture_tv_image_2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.texture_tv_image_2)
}
inline std::string* ImageProcessorConfig::mutable_texture_tv_image_2() {
  std::string* _s = _internal_mutable_texture_tv_image_2();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.texture_tv_image_2)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_texture_tv_image_2() const {
  return texture_tv_image_2_.Get();
}
inline void ImageProcessorConfig::_internal_set_texture_tv_image_2(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  texture_tv_image_2_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_texture_tv_image_2() {
  _has_bits_[0] |= 0x00000080u;
  return texture_tv_image_2_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_2_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_texture_tv_image_2() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.texture_tv_image_2)
  if (!_internal_has_texture_tv_image_2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = texture_tv_image_2_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_texture_tv_image_2(std::string* texture_tv_image_2) {
  if (texture_tv_image_2 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  texture_tv_image_2_.SetAllocated(texture_tv_image_2, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.texture_tv_image_2)
}

// optional string texture_tv_image_3 = 9 [default = "data/perception/calibs/simulation/alpha_TV_3.png"];
inline bool ImageProcessorConfig::_internal_has_texture_tv_image_3() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_texture_tv_image_3() const {
  return _internal_has_texture_tv_image_3();
}
inline void ImageProcessorConfig::clear_texture_tv_image_3() {
  texture_tv_image_3_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_3_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& ImageProcessorConfig::texture_tv_image_3() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.texture_tv_image_3)
  if (texture_tv_image_3_.IsDefault()) return _i_give_permission_to_break_this_code_default_texture_tv_image_3_.get();
  return _internal_texture_tv_image_3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_texture_tv_image_3(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 texture_tv_image_3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.texture_tv_image_3)
}
inline std::string* ImageProcessorConfig::mutable_texture_tv_image_3() {
  std::string* _s = _internal_mutable_texture_tv_image_3();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.texture_tv_image_3)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_texture_tv_image_3() const {
  return texture_tv_image_3_.Get();
}
inline void ImageProcessorConfig::_internal_set_texture_tv_image_3(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  texture_tv_image_3_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_texture_tv_image_3() {
  _has_bits_[0] |= 0x00000100u;
  return texture_tv_image_3_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_3_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_texture_tv_image_3() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.texture_tv_image_3)
  if (!_internal_has_texture_tv_image_3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = texture_tv_image_3_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_texture_tv_image_3(std::string* texture_tv_image_3) {
  if (texture_tv_image_3 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  texture_tv_image_3_.SetAllocated(texture_tv_image_3, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.texture_tv_image_3)
}

// optional string calib_info_0 = 10 [default = "data/perception/calibs/simulation/calib_cam0_topview.txt"];
inline bool ImageProcessorConfig::_internal_has_calib_info_0() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_calib_info_0() const {
  return _internal_has_calib_info_0();
}
inline void ImageProcessorConfig::clear_calib_info_0() {
  calib_info_0_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_0_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& ImageProcessorConfig::calib_info_0() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.calib_info_0)
  if (calib_info_0_.IsDefault()) return _i_give_permission_to_break_this_code_default_calib_info_0_.get();
  return _internal_calib_info_0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_calib_info_0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000200u;
 calib_info_0_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.calib_info_0)
}
inline std::string* ImageProcessorConfig::mutable_calib_info_0() {
  std::string* _s = _internal_mutable_calib_info_0();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.calib_info_0)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_calib_info_0() const {
  return calib_info_0_.Get();
}
inline void ImageProcessorConfig::_internal_set_calib_info_0(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  calib_info_0_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_calib_info_0() {
  _has_bits_[0] |= 0x00000200u;
  return calib_info_0_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_0_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_calib_info_0() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.calib_info_0)
  if (!_internal_has_calib_info_0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  auto* p = calib_info_0_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_calib_info_0(std::string* calib_info_0) {
  if (calib_info_0 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  calib_info_0_.SetAllocated(calib_info_0, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.calib_info_0)
}

// optional string calib_info_1 = 11 [default = "data/perception/calibs/simulation/calib_cam1_topview.txt"];
inline bool ImageProcessorConfig::_internal_has_calib_info_1() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_calib_info_1() const {
  return _internal_has_calib_info_1();
}
inline void ImageProcessorConfig::clear_calib_info_1() {
  calib_info_1_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_1_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& ImageProcessorConfig::calib_info_1() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.calib_info_1)
  if (calib_info_1_.IsDefault()) return _i_give_permission_to_break_this_code_default_calib_info_1_.get();
  return _internal_calib_info_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_calib_info_1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000400u;
 calib_info_1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.calib_info_1)
}
inline std::string* ImageProcessorConfig::mutable_calib_info_1() {
  std::string* _s = _internal_mutable_calib_info_1();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.calib_info_1)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_calib_info_1() const {
  return calib_info_1_.Get();
}
inline void ImageProcessorConfig::_internal_set_calib_info_1(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  calib_info_1_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_calib_info_1() {
  _has_bits_[0] |= 0x00000400u;
  return calib_info_1_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_1_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_calib_info_1() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.calib_info_1)
  if (!_internal_has_calib_info_1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  auto* p = calib_info_1_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_calib_info_1(std::string* calib_info_1) {
  if (calib_info_1 != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  calib_info_1_.SetAllocated(calib_info_1, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.calib_info_1)
}

// optional string calib_info_2 = 12 [default = "data/perception/calibs/simulation/calib_cam2_topview.txt"];
inline bool ImageProcessorConfig::_internal_has_calib_info_2() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_calib_info_2() const {
  return _internal_has_calib_info_2();
}
inline void ImageProcessorConfig::clear_calib_info_2() {
  calib_info_2_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_2_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& ImageProcessorConfig::calib_info_2() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.calib_info_2)
  if (calib_info_2_.IsDefault()) return _i_give_permission_to_break_this_code_default_calib_info_2_.get();
  return _internal_calib_info_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_calib_info_2(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000800u;
 calib_info_2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.calib_info_2)
}
inline std::string* ImageProcessorConfig::mutable_calib_info_2() {
  std::string* _s = _internal_mutable_calib_info_2();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.calib_info_2)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_calib_info_2() const {
  return calib_info_2_.Get();
}
inline void ImageProcessorConfig::_internal_set_calib_info_2(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  calib_info_2_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_calib_info_2() {
  _has_bits_[0] |= 0x00000800u;
  return calib_info_2_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_2_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_calib_info_2() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.calib_info_2)
  if (!_internal_has_calib_info_2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  auto* p = calib_info_2_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_calib_info_2(std::string* calib_info_2) {
  if (calib_info_2 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  calib_info_2_.SetAllocated(calib_info_2, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.calib_info_2)
}

// optional string calib_info_3 = 13 [default = "data/perception/calibs/simulation/calib_cam3_topview.txt"];
inline bool ImageProcessorConfig::_internal_has_calib_info_3() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_calib_info_3() const {
  return _internal_has_calib_info_3();
}
inline void ImageProcessorConfig::clear_calib_info_3() {
  calib_info_3_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_3_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& ImageProcessorConfig::calib_info_3() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.calib_info_3)
  if (calib_info_3_.IsDefault()) return _i_give_permission_to_break_this_code_default_calib_info_3_.get();
  return _internal_calib_info_3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_calib_info_3(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00001000u;
 calib_info_3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.calib_info_3)
}
inline std::string* ImageProcessorConfig::mutable_calib_info_3() {
  std::string* _s = _internal_mutable_calib_info_3();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.calib_info_3)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_calib_info_3() const {
  return calib_info_3_.Get();
}
inline void ImageProcessorConfig::_internal_set_calib_info_3(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  calib_info_3_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_calib_info_3() {
  _has_bits_[0] |= 0x00001000u;
  return calib_info_3_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_3_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_calib_info_3() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.calib_info_3)
  if (!_internal_has_calib_info_3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  auto* p = calib_info_3_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_calib_info_3(std::string* calib_info_3) {
  if (calib_info_3 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  calib_info_3_.SetAllocated(calib_info_3, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.calib_info_3)
}

// optional int64 min_diff_thresh = 14 [default = 10];
inline bool ImageProcessorConfig::_internal_has_min_diff_thresh() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_min_diff_thresh() const {
  return _internal_has_min_diff_thresh();
}
inline void ImageProcessorConfig::clear_min_diff_thresh() {
  min_diff_thresh_ = int64_t{10};
  _has_bits_[0] &= ~0x00008000u;
}
inline int64_t ImageProcessorConfig::_internal_min_diff_thresh() const {
  return min_diff_thresh_;
}
inline int64_t ImageProcessorConfig::min_diff_thresh() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.min_diff_thresh)
  return _internal_min_diff_thresh();
}
inline void ImageProcessorConfig::_internal_set_min_diff_thresh(int64_t value) {
  _has_bits_[0] |= 0x00008000u;
  min_diff_thresh_ = value;
}
inline void ImageProcessorConfig::set_min_diff_thresh(int64_t value) {
  _internal_set_min_diff_thresh(value);
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.min_diff_thresh)
}

// optional int32 queue_size = 15 [default = 5];
inline bool ImageProcessorConfig::_internal_has_queue_size() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_queue_size() const {
  return _internal_has_queue_size();
}
inline void ImageProcessorConfig::clear_queue_size() {
  queue_size_ = 5;
  _has_bits_[0] &= ~0x00010000u;
}
inline int32_t ImageProcessorConfig::_internal_queue_size() const {
  return queue_size_;
}
inline int32_t ImageProcessorConfig::queue_size() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.queue_size)
  return _internal_queue_size();
}
inline void ImageProcessorConfig::_internal_set_queue_size(int32_t value) {
  _has_bits_[0] |= 0x00010000u;
  queue_size_ = value;
}
inline void ImageProcessorConfig::set_queue_size(int32_t value) {
  _internal_set_queue_size(value);
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.queue_size)
}

// optional int32 cached_indices = 16 [default = 1];
inline bool ImageProcessorConfig::_internal_has_cached_indices() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_cached_indices() const {
  return _internal_has_cached_indices();
}
inline void ImageProcessorConfig::clear_cached_indices() {
  cached_indices_ = 1;
  _has_bits_[0] &= ~0x00020000u;
}
inline int32_t ImageProcessorConfig::_internal_cached_indices() const {
  return cached_indices_;
}
inline int32_t ImageProcessorConfig::cached_indices() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.cached_indices)
  return _internal_cached_indices();
}
inline void ImageProcessorConfig::_internal_set_cached_indices(int32_t value) {
  _has_bits_[0] |= 0x00020000u;
  cached_indices_ = value;
}
inline void ImageProcessorConfig::set_cached_indices(int32_t value) {
  _internal_set_cached_indices(value);
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.cached_indices)
}

// optional string calib_dir = 17 [default = "data/perception/calibs/simulation/"];
inline bool ImageProcessorConfig::_internal_has_calib_dir() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_calib_dir() const {
  return _internal_has_calib_dir();
}
inline void ImageProcessorConfig::clear_calib_dir() {
  calib_dir_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_dir_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& ImageProcessorConfig::calib_dir() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.calib_dir)
  if (calib_dir_.IsDefault()) return _i_give_permission_to_break_this_code_default_calib_dir_.get();
  return _internal_calib_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageProcessorConfig::set_calib_dir(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00002000u;
 calib_dir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.calib_dir)
}
inline std::string* ImageProcessorConfig::mutable_calib_dir() {
  std::string* _s = _internal_mutable_calib_dir();
  // @@protoc_insertion_point(field_mutable:ImageProcessorConfig.calib_dir)
  return _s;
}
inline const std::string& ImageProcessorConfig::_internal_calib_dir() const {
  return calib_dir_.Get();
}
inline void ImageProcessorConfig::_internal_set_calib_dir(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  calib_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::_internal_mutable_calib_dir() {
  _has_bits_[0] |= 0x00002000u;
  return calib_dir_.Mutable(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_dir_, GetArenaForAllocation());
}
inline std::string* ImageProcessorConfig::release_calib_dir() {
  // @@protoc_insertion_point(field_release:ImageProcessorConfig.calib_dir)
  if (!_internal_has_calib_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  auto* p = calib_dir_.Release();
  return p;
}
inline void ImageProcessorConfig::set_allocated_calib_dir(std::string* calib_dir) {
  if (calib_dir != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  calib_dir_.SetAllocated(calib_dir, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImageProcessorConfig.calib_dir)
}

// optional bool cuda_enabled = 18 [default = false];
inline bool ImageProcessorConfig::_internal_has_cuda_enabled() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ImageProcessorConfig::has_cuda_enabled() const {
  return _internal_has_cuda_enabled();
}
inline void ImageProcessorConfig::clear_cuda_enabled() {
  cuda_enabled_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ImageProcessorConfig::_internal_cuda_enabled() const {
  return cuda_enabled_;
}
inline bool ImageProcessorConfig::cuda_enabled() const {
  // @@protoc_insertion_point(field_get:ImageProcessorConfig.cuda_enabled)
  return _internal_cuda_enabled();
}
inline void ImageProcessorConfig::_internal_set_cuda_enabled(bool value) {
  _has_bits_[0] |= 0x00004000u;
  cuda_enabled_ = value;
}
inline void ImageProcessorConfig::set_cuda_enabled(bool value) {
  _internal_set_cuda_enabled(value);
  // @@protoc_insertion_point(field_set:ImageProcessorConfig.cuda_enabled)
}

// -------------------------------------------------------------------

// SpaceDetectorConfig

// optional string model_path = 1 [default = "data/perception/model_weights/"];
inline bool SpaceDetectorConfig::_internal_has_model_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpaceDetectorConfig::has_model_path() const {
  return _internal_has_model_path();
}
inline void SpaceDetectorConfig::clear_model_path() {
  model_path_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_model_path_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpaceDetectorConfig::model_path() const {
  // @@protoc_insertion_point(field_get:SpaceDetectorConfig.model_path)
  if (model_path_.IsDefault()) return _i_give_permission_to_break_this_code_default_model_path_.get();
  return _internal_model_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpaceDetectorConfig::set_model_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 model_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SpaceDetectorConfig.model_path)
}
inline std::string* SpaceDetectorConfig::mutable_model_path() {
  std::string* _s = _internal_mutable_model_path();
  // @@protoc_insertion_point(field_mutable:SpaceDetectorConfig.model_path)
  return _s;
}
inline const std::string& SpaceDetectorConfig::_internal_model_path() const {
  return model_path_.Get();
}
inline void SpaceDetectorConfig::_internal_set_model_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_path_.Set(value, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::_internal_mutable_model_path() {
  _has_bits_[0] |= 0x00000001u;
  return model_path_.Mutable(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_model_path_, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::release_model_path() {
  // @@protoc_insertion_point(field_release:SpaceDetectorConfig.model_path)
  if (!_internal_has_model_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = model_path_.Release();
  return p;
}
inline void SpaceDetectorConfig::set_allocated_model_path(std::string* model_path) {
  if (model_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_path_.SetAllocated(model_path, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SpaceDetectorConfig.model_path)
}

// optional string camera_json_data = 2 [default = "data/perception/calibs/simulation/cameraData.json"];
inline bool SpaceDetectorConfig::_internal_has_camera_json_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpaceDetectorConfig::has_camera_json_data() const {
  return _internal_has_camera_json_data();
}
inline void SpaceDetectorConfig::clear_camera_json_data() {
  camera_json_data_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_camera_json_data_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SpaceDetectorConfig::camera_json_data() const {
  // @@protoc_insertion_point(field_get:SpaceDetectorConfig.camera_json_data)
  if (camera_json_data_.IsDefault()) return _i_give_permission_to_break_this_code_default_camera_json_data_.get();
  return _internal_camera_json_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpaceDetectorConfig::set_camera_json_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 camera_json_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SpaceDetectorConfig.camera_json_data)
}
inline std::string* SpaceDetectorConfig::mutable_camera_json_data() {
  std::string* _s = _internal_mutable_camera_json_data();
  // @@protoc_insertion_point(field_mutable:SpaceDetectorConfig.camera_json_data)
  return _s;
}
inline const std::string& SpaceDetectorConfig::_internal_camera_json_data() const {
  return camera_json_data_.Get();
}
inline void SpaceDetectorConfig::_internal_set_camera_json_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  camera_json_data_.Set(value, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::_internal_mutable_camera_json_data() {
  _has_bits_[0] |= 0x00000002u;
  return camera_json_data_.Mutable(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_camera_json_data_, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::release_camera_json_data() {
  // @@protoc_insertion_point(field_release:SpaceDetectorConfig.camera_json_data)
  if (!_internal_has_camera_json_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = camera_json_data_.Release();
  return p;
}
inline void SpaceDetectorConfig::set_allocated_camera_json_data(std::string* camera_json_data) {
  if (camera_json_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  camera_json_data_.SetAllocated(camera_json_data, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SpaceDetectorConfig.camera_json_data)
}

// optional string alpha_front = 3 [default = "data/perception/calibs/simulation/alpha_1.png"];
inline bool SpaceDetectorConfig::_internal_has_alpha_front() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SpaceDetectorConfig::has_alpha_front() const {
  return _internal_has_alpha_front();
}
inline void SpaceDetectorConfig::clear_alpha_front() {
  alpha_front_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_alpha_front_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SpaceDetectorConfig::alpha_front() const {
  // @@protoc_insertion_point(field_get:SpaceDetectorConfig.alpha_front)
  if (alpha_front_.IsDefault()) return _i_give_permission_to_break_this_code_default_alpha_front_.get();
  return _internal_alpha_front();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpaceDetectorConfig::set_alpha_front(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 alpha_front_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SpaceDetectorConfig.alpha_front)
}
inline std::string* SpaceDetectorConfig::mutable_alpha_front() {
  std::string* _s = _internal_mutable_alpha_front();
  // @@protoc_insertion_point(field_mutable:SpaceDetectorConfig.alpha_front)
  return _s;
}
inline const std::string& SpaceDetectorConfig::_internal_alpha_front() const {
  return alpha_front_.Get();
}
inline void SpaceDetectorConfig::_internal_set_alpha_front(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  alpha_front_.Set(value, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::_internal_mutable_alpha_front() {
  _has_bits_[0] |= 0x00000004u;
  return alpha_front_.Mutable(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_alpha_front_, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::release_alpha_front() {
  // @@protoc_insertion_point(field_release:SpaceDetectorConfig.alpha_front)
  if (!_internal_has_alpha_front()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = alpha_front_.Release();
  return p;
}
inline void SpaceDetectorConfig::set_allocated_alpha_front(std::string* alpha_front) {
  if (alpha_front != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  alpha_front_.SetAllocated(alpha_front, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SpaceDetectorConfig.alpha_front)
}

// optional string alpha_rear = 4 [default = "data/perception/calibs/simulation/alpha_2.png"];
inline bool SpaceDetectorConfig::_internal_has_alpha_rear() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SpaceDetectorConfig::has_alpha_rear() const {
  return _internal_has_alpha_rear();
}
inline void SpaceDetectorConfig::clear_alpha_rear() {
  alpha_rear_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_alpha_rear_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SpaceDetectorConfig::alpha_rear() const {
  // @@protoc_insertion_point(field_get:SpaceDetectorConfig.alpha_rear)
  if (alpha_rear_.IsDefault()) return _i_give_permission_to_break_this_code_default_alpha_rear_.get();
  return _internal_alpha_rear();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpaceDetectorConfig::set_alpha_rear(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 alpha_rear_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SpaceDetectorConfig.alpha_rear)
}
inline std::string* SpaceDetectorConfig::mutable_alpha_rear() {
  std::string* _s = _internal_mutable_alpha_rear();
  // @@protoc_insertion_point(field_mutable:SpaceDetectorConfig.alpha_rear)
  return _s;
}
inline const std::string& SpaceDetectorConfig::_internal_alpha_rear() const {
  return alpha_rear_.Get();
}
inline void SpaceDetectorConfig::_internal_set_alpha_rear(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  alpha_rear_.Set(value, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::_internal_mutable_alpha_rear() {
  _has_bits_[0] |= 0x00000008u;
  return alpha_rear_.Mutable(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_alpha_rear_, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::release_alpha_rear() {
  // @@protoc_insertion_point(field_release:SpaceDetectorConfig.alpha_rear)
  if (!_internal_has_alpha_rear()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = alpha_rear_.Release();
  return p;
}
inline void SpaceDetectorConfig::set_allocated_alpha_rear(std::string* alpha_rear) {
  if (alpha_rear != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  alpha_rear_.SetAllocated(alpha_rear, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SpaceDetectorConfig.alpha_rear)
}

// optional string roi_mask_front = 5 [default = "data/perception/calibs/simulation/roi_mask_1.png"];
inline bool SpaceDetectorConfig::_internal_has_roi_mask_front() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SpaceDetectorConfig::has_roi_mask_front() const {
  return _internal_has_roi_mask_front();
}
inline void SpaceDetectorConfig::clear_roi_mask_front() {
  roi_mask_front_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_front_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SpaceDetectorConfig::roi_mask_front() const {
  // @@protoc_insertion_point(field_get:SpaceDetectorConfig.roi_mask_front)
  if (roi_mask_front_.IsDefault()) return _i_give_permission_to_break_this_code_default_roi_mask_front_.get();
  return _internal_roi_mask_front();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpaceDetectorConfig::set_roi_mask_front(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 roi_mask_front_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SpaceDetectorConfig.roi_mask_front)
}
inline std::string* SpaceDetectorConfig::mutable_roi_mask_front() {
  std::string* _s = _internal_mutable_roi_mask_front();
  // @@protoc_insertion_point(field_mutable:SpaceDetectorConfig.roi_mask_front)
  return _s;
}
inline const std::string& SpaceDetectorConfig::_internal_roi_mask_front() const {
  return roi_mask_front_.Get();
}
inline void SpaceDetectorConfig::_internal_set_roi_mask_front(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  roi_mask_front_.Set(value, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::_internal_mutable_roi_mask_front() {
  _has_bits_[0] |= 0x00000010u;
  return roi_mask_front_.Mutable(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_front_, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::release_roi_mask_front() {
  // @@protoc_insertion_point(field_release:SpaceDetectorConfig.roi_mask_front)
  if (!_internal_has_roi_mask_front()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = roi_mask_front_.Release();
  return p;
}
inline void SpaceDetectorConfig::set_allocated_roi_mask_front(std::string* roi_mask_front) {
  if (roi_mask_front != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  roi_mask_front_.SetAllocated(roi_mask_front, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SpaceDetectorConfig.roi_mask_front)
}

// optional string roi_mask_rear = 6 [default = "data/perception/calibs/simulation/roi_mask_2.png"];
inline bool SpaceDetectorConfig::_internal_has_roi_mask_rear() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SpaceDetectorConfig::has_roi_mask_rear() const {
  return _internal_has_roi_mask_rear();
}
inline void SpaceDetectorConfig::clear_roi_mask_rear() {
  roi_mask_rear_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_rear_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SpaceDetectorConfig::roi_mask_rear() const {
  // @@protoc_insertion_point(field_get:SpaceDetectorConfig.roi_mask_rear)
  if (roi_mask_rear_.IsDefault()) return _i_give_permission_to_break_this_code_default_roi_mask_rear_.get();
  return _internal_roi_mask_rear();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpaceDetectorConfig::set_roi_mask_rear(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 roi_mask_rear_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SpaceDetectorConfig.roi_mask_rear)
}
inline std::string* SpaceDetectorConfig::mutable_roi_mask_rear() {
  std::string* _s = _internal_mutable_roi_mask_rear();
  // @@protoc_insertion_point(field_mutable:SpaceDetectorConfig.roi_mask_rear)
  return _s;
}
inline const std::string& SpaceDetectorConfig::_internal_roi_mask_rear() const {
  return roi_mask_rear_.Get();
}
inline void SpaceDetectorConfig::_internal_set_roi_mask_rear(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  roi_mask_rear_.Set(value, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::_internal_mutable_roi_mask_rear() {
  _has_bits_[0] |= 0x00000020u;
  return roi_mask_rear_.Mutable(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_rear_, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::release_roi_mask_rear() {
  // @@protoc_insertion_point(field_release:SpaceDetectorConfig.roi_mask_rear)
  if (!_internal_has_roi_mask_rear()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = roi_mask_rear_.Release();
  return p;
}
inline void SpaceDetectorConfig::set_allocated_roi_mask_rear(std::string* roi_mask_rear) {
  if (roi_mask_rear != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  roi_mask_rear_.SetAllocated(roi_mask_rear, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SpaceDetectorConfig.roi_mask_rear)
}

// optional string roi_mask_left = 7 [default = "data/perception/calibs/simulation/roi_mask_0.png"];
inline bool SpaceDetectorConfig::_internal_has_roi_mask_left() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SpaceDetectorConfig::has_roi_mask_left() const {
  return _internal_has_roi_mask_left();
}
inline void SpaceDetectorConfig::clear_roi_mask_left() {
  roi_mask_left_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_left_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& SpaceDetectorConfig::roi_mask_left() const {
  // @@protoc_insertion_point(field_get:SpaceDetectorConfig.roi_mask_left)
  if (roi_mask_left_.IsDefault()) return _i_give_permission_to_break_this_code_default_roi_mask_left_.get();
  return _internal_roi_mask_left();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpaceDetectorConfig::set_roi_mask_left(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 roi_mask_left_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SpaceDetectorConfig.roi_mask_left)
}
inline std::string* SpaceDetectorConfig::mutable_roi_mask_left() {
  std::string* _s = _internal_mutable_roi_mask_left();
  // @@protoc_insertion_point(field_mutable:SpaceDetectorConfig.roi_mask_left)
  return _s;
}
inline const std::string& SpaceDetectorConfig::_internal_roi_mask_left() const {
  return roi_mask_left_.Get();
}
inline void SpaceDetectorConfig::_internal_set_roi_mask_left(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  roi_mask_left_.Set(value, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::_internal_mutable_roi_mask_left() {
  _has_bits_[0] |= 0x00000040u;
  return roi_mask_left_.Mutable(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_left_, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::release_roi_mask_left() {
  // @@protoc_insertion_point(field_release:SpaceDetectorConfig.roi_mask_left)
  if (!_internal_has_roi_mask_left()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = roi_mask_left_.Release();
  return p;
}
inline void SpaceDetectorConfig::set_allocated_roi_mask_left(std::string* roi_mask_left) {
  if (roi_mask_left != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  roi_mask_left_.SetAllocated(roi_mask_left, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SpaceDetectorConfig.roi_mask_left)
}

// optional string roi_mask_right = 8 [default = "data/perception/calibs/simulation/roi_mask_3.png"];
inline bool SpaceDetectorConfig::_internal_has_roi_mask_right() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SpaceDetectorConfig::has_roi_mask_right() const {
  return _internal_has_roi_mask_right();
}
inline void SpaceDetectorConfig::clear_roi_mask_right() {
  roi_mask_right_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_right_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& SpaceDetectorConfig::roi_mask_right() const {
  // @@protoc_insertion_point(field_get:SpaceDetectorConfig.roi_mask_right)
  if (roi_mask_right_.IsDefault()) return _i_give_permission_to_break_this_code_default_roi_mask_right_.get();
  return _internal_roi_mask_right();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpaceDetectorConfig::set_roi_mask_right(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 roi_mask_right_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SpaceDetectorConfig.roi_mask_right)
}
inline std::string* SpaceDetectorConfig::mutable_roi_mask_right() {
  std::string* _s = _internal_mutable_roi_mask_right();
  // @@protoc_insertion_point(field_mutable:SpaceDetectorConfig.roi_mask_right)
  return _s;
}
inline const std::string& SpaceDetectorConfig::_internal_roi_mask_right() const {
  return roi_mask_right_.Get();
}
inline void SpaceDetectorConfig::_internal_set_roi_mask_right(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  roi_mask_right_.Set(value, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::_internal_mutable_roi_mask_right() {
  _has_bits_[0] |= 0x00000080u;
  return roi_mask_right_.Mutable(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_right_, GetArenaForAllocation());
}
inline std::string* SpaceDetectorConfig::release_roi_mask_right() {
  // @@protoc_insertion_point(field_release:SpaceDetectorConfig.roi_mask_right)
  if (!_internal_has_roi_mask_right()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = roi_mask_right_.Release();
  return p;
}
inline void SpaceDetectorConfig::set_allocated_roi_mask_right(std::string* roi_mask_right) {
  if (roi_mask_right != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  roi_mask_right_.SetAllocated(roi_mask_right, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SpaceDetectorConfig.roi_mask_right)
}

// -------------------------------------------------------------------

// USSHandlerConfig

// optional int32 num_topics = 1 [default = 12];
inline bool USSHandlerConfig::_internal_has_num_topics() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool USSHandlerConfig::has_num_topics() const {
  return _internal_has_num_topics();
}
inline void USSHandlerConfig::clear_num_topics() {
  num_topics_ = 12;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t USSHandlerConfig::_internal_num_topics() const {
  return num_topics_;
}
inline int32_t USSHandlerConfig::num_topics() const {
  // @@protoc_insertion_point(field_get:USSHandlerConfig.num_topics)
  return _internal_num_topics();
}
inline void USSHandlerConfig::_internal_set_num_topics(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  num_topics_ = value;
}
inline void USSHandlerConfig::set_num_topics(int32_t value) {
  _internal_set_num_topics(value);
  // @@protoc_insertion_point(field_set:USSHandlerConfig.num_topics)
}

// optional int64 min_diff_thresh = 2 [default = 10];
inline bool USSHandlerConfig::_internal_has_min_diff_thresh() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool USSHandlerConfig::has_min_diff_thresh() const {
  return _internal_has_min_diff_thresh();
}
inline void USSHandlerConfig::clear_min_diff_thresh() {
  min_diff_thresh_ = int64_t{10};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t USSHandlerConfig::_internal_min_diff_thresh() const {
  return min_diff_thresh_;
}
inline int64_t USSHandlerConfig::min_diff_thresh() const {
  // @@protoc_insertion_point(field_get:USSHandlerConfig.min_diff_thresh)
  return _internal_min_diff_thresh();
}
inline void USSHandlerConfig::_internal_set_min_diff_thresh(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  min_diff_thresh_ = value;
}
inline void USSHandlerConfig::set_min_diff_thresh(int64_t value) {
  _internal_set_min_diff_thresh(value);
  // @@protoc_insertion_point(field_set:USSHandlerConfig.min_diff_thresh)
}

// optional int32 queue_size = 3 [default = 5];
inline bool USSHandlerConfig::_internal_has_queue_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool USSHandlerConfig::has_queue_size() const {
  return _internal_has_queue_size();
}
inline void USSHandlerConfig::clear_queue_size() {
  queue_size_ = 5;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t USSHandlerConfig::_internal_queue_size() const {
  return queue_size_;
}
inline int32_t USSHandlerConfig::queue_size() const {
  // @@protoc_insertion_point(field_get:USSHandlerConfig.queue_size)
  return _internal_queue_size();
}
inline void USSHandlerConfig::_internal_set_queue_size(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  queue_size_ = value;
}
inline void USSHandlerConfig::set_queue_size(int32_t value) {
  _internal_set_queue_size(value);
  // @@protoc_insertion_point(field_set:USSHandlerConfig.queue_size)
}

// optional int32 cached_indices = 4 [default = 1];
inline bool USSHandlerConfig::_internal_has_cached_indices() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool USSHandlerConfig::has_cached_indices() const {
  return _internal_has_cached_indices();
}
inline void USSHandlerConfig::clear_cached_indices() {
  cached_indices_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t USSHandlerConfig::_internal_cached_indices() const {
  return cached_indices_;
}
inline int32_t USSHandlerConfig::cached_indices() const {
  // @@protoc_insertion_point(field_get:USSHandlerConfig.cached_indices)
  return _internal_cached_indices();
}
inline void USSHandlerConfig::_internal_set_cached_indices(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  cached_indices_ = value;
}
inline void USSHandlerConfig::set_cached_indices(int32_t value) {
  _internal_set_cached_indices(value);
  // @@protoc_insertion_point(field_set:USSHandlerConfig.cached_indices)
}

// -------------------------------------------------------------------

// PerceptionConfig

// optional .ImageProcessorConfig imgproc_config = 1;
inline bool PerceptionConfig::_internal_has_imgproc_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || imgproc_config_ != nullptr);
  return value;
}
inline bool PerceptionConfig::has_imgproc_config() const {
  return _internal_has_imgproc_config();
}
inline void PerceptionConfig::clear_imgproc_config() {
  if (imgproc_config_ != nullptr) imgproc_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ImageProcessorConfig& PerceptionConfig::_internal_imgproc_config() const {
  const ::ImageProcessorConfig* p = imgproc_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::ImageProcessorConfig&>(
      ::_ImageProcessorConfig_default_instance_);
}
inline const ::ImageProcessorConfig& PerceptionConfig::imgproc_config() const {
  // @@protoc_insertion_point(field_get:PerceptionConfig.imgproc_config)
  return _internal_imgproc_config();
}
inline void PerceptionConfig::unsafe_arena_set_allocated_imgproc_config(
    ::ImageProcessorConfig* imgproc_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imgproc_config_);
  }
  imgproc_config_ = imgproc_config;
  if (imgproc_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PerceptionConfig.imgproc_config)
}
inline ::ImageProcessorConfig* PerceptionConfig::release_imgproc_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::ImageProcessorConfig* temp = imgproc_config_;
  imgproc_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ImageProcessorConfig* PerceptionConfig::unsafe_arena_release_imgproc_config() {
  // @@protoc_insertion_point(field_release:PerceptionConfig.imgproc_config)
  _has_bits_[0] &= ~0x00000001u;
  ::ImageProcessorConfig* temp = imgproc_config_;
  imgproc_config_ = nullptr;
  return temp;
}
inline ::ImageProcessorConfig* PerceptionConfig::_internal_mutable_imgproc_config() {
  _has_bits_[0] |= 0x00000001u;
  if (imgproc_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ImageProcessorConfig>(GetArenaForAllocation());
    imgproc_config_ = p;
  }
  return imgproc_config_;
}
inline ::ImageProcessorConfig* PerceptionConfig::mutable_imgproc_config() {
  ::ImageProcessorConfig* _msg = _internal_mutable_imgproc_config();
  // @@protoc_insertion_point(field_mutable:PerceptionConfig.imgproc_config)
  return _msg;
}
inline void PerceptionConfig::set_allocated_imgproc_config(::ImageProcessorConfig* imgproc_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete imgproc_config_;
  }
  if (imgproc_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imgproc_config);
    if (message_arena != submessage_arena) {
      imgproc_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imgproc_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  imgproc_config_ = imgproc_config;
  // @@protoc_insertion_point(field_set_allocated:PerceptionConfig.imgproc_config)
}

// optional .SpaceDetectorConfig spdet_config = 2;
inline bool PerceptionConfig::_internal_has_spdet_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || spdet_config_ != nullptr);
  return value;
}
inline bool PerceptionConfig::has_spdet_config() const {
  return _internal_has_spdet_config();
}
inline void PerceptionConfig::clear_spdet_config() {
  if (spdet_config_ != nullptr) spdet_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SpaceDetectorConfig& PerceptionConfig::_internal_spdet_config() const {
  const ::SpaceDetectorConfig* p = spdet_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::SpaceDetectorConfig&>(
      ::_SpaceDetectorConfig_default_instance_);
}
inline const ::SpaceDetectorConfig& PerceptionConfig::spdet_config() const {
  // @@protoc_insertion_point(field_get:PerceptionConfig.spdet_config)
  return _internal_spdet_config();
}
inline void PerceptionConfig::unsafe_arena_set_allocated_spdet_config(
    ::SpaceDetectorConfig* spdet_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spdet_config_);
  }
  spdet_config_ = spdet_config;
  if (spdet_config) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PerceptionConfig.spdet_config)
}
inline ::SpaceDetectorConfig* PerceptionConfig::release_spdet_config() {
  _has_bits_[0] &= ~0x00000002u;
  ::SpaceDetectorConfig* temp = spdet_config_;
  spdet_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SpaceDetectorConfig* PerceptionConfig::unsafe_arena_release_spdet_config() {
  // @@protoc_insertion_point(field_release:PerceptionConfig.spdet_config)
  _has_bits_[0] &= ~0x00000002u;
  ::SpaceDetectorConfig* temp = spdet_config_;
  spdet_config_ = nullptr;
  return temp;
}
inline ::SpaceDetectorConfig* PerceptionConfig::_internal_mutable_spdet_config() {
  _has_bits_[0] |= 0x00000002u;
  if (spdet_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SpaceDetectorConfig>(GetArenaForAllocation());
    spdet_config_ = p;
  }
  return spdet_config_;
}
inline ::SpaceDetectorConfig* PerceptionConfig::mutable_spdet_config() {
  ::SpaceDetectorConfig* _msg = _internal_mutable_spdet_config();
  // @@protoc_insertion_point(field_mutable:PerceptionConfig.spdet_config)
  return _msg;
}
inline void PerceptionConfig::set_allocated_spdet_config(::SpaceDetectorConfig* spdet_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spdet_config_;
  }
  if (spdet_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spdet_config);
    if (message_arena != submessage_arena) {
      spdet_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spdet_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  spdet_config_ = spdet_config;
  // @@protoc_insertion_point(field_set_allocated:PerceptionConfig.spdet_config)
}

// optional .USSHandlerConfig usshandler_config = 3;
inline bool PerceptionConfig::_internal_has_usshandler_config() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || usshandler_config_ != nullptr);
  return value;
}
inline bool PerceptionConfig::has_usshandler_config() const {
  return _internal_has_usshandler_config();
}
inline void PerceptionConfig::clear_usshandler_config() {
  if (usshandler_config_ != nullptr) usshandler_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::USSHandlerConfig& PerceptionConfig::_internal_usshandler_config() const {
  const ::USSHandlerConfig* p = usshandler_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::USSHandlerConfig&>(
      ::_USSHandlerConfig_default_instance_);
}
inline const ::USSHandlerConfig& PerceptionConfig::usshandler_config() const {
  // @@protoc_insertion_point(field_get:PerceptionConfig.usshandler_config)
  return _internal_usshandler_config();
}
inline void PerceptionConfig::unsafe_arena_set_allocated_usshandler_config(
    ::USSHandlerConfig* usshandler_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usshandler_config_);
  }
  usshandler_config_ = usshandler_config;
  if (usshandler_config) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PerceptionConfig.usshandler_config)
}
inline ::USSHandlerConfig* PerceptionConfig::release_usshandler_config() {
  _has_bits_[0] &= ~0x00000004u;
  ::USSHandlerConfig* temp = usshandler_config_;
  usshandler_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::USSHandlerConfig* PerceptionConfig::unsafe_arena_release_usshandler_config() {
  // @@protoc_insertion_point(field_release:PerceptionConfig.usshandler_config)
  _has_bits_[0] &= ~0x00000004u;
  ::USSHandlerConfig* temp = usshandler_config_;
  usshandler_config_ = nullptr;
  return temp;
}
inline ::USSHandlerConfig* PerceptionConfig::_internal_mutable_usshandler_config() {
  _has_bits_[0] |= 0x00000004u;
  if (usshandler_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::USSHandlerConfig>(GetArenaForAllocation());
    usshandler_config_ = p;
  }
  return usshandler_config_;
}
inline ::USSHandlerConfig* PerceptionConfig::mutable_usshandler_config() {
  ::USSHandlerConfig* _msg = _internal_mutable_usshandler_config();
  // @@protoc_insertion_point(field_mutable:PerceptionConfig.usshandler_config)
  return _msg;
}
inline void PerceptionConfig::set_allocated_usshandler_config(::USSHandlerConfig* usshandler_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete usshandler_config_;
  }
  if (usshandler_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(usshandler_config);
    if (message_arena != submessage_arena) {
      usshandler_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usshandler_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  usshandler_config_ = usshandler_config;
  // @@protoc_insertion_point(field_set_allocated:PerceptionConfig.usshandler_config)
}

// optional bool od_enabled = 4 [default = false];
inline bool PerceptionConfig::_internal_has_od_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerceptionConfig::has_od_enabled() const {
  return _internal_has_od_enabled();
}
inline void PerceptionConfig::clear_od_enabled() {
  od_enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PerceptionConfig::_internal_od_enabled() const {
  return od_enabled_;
}
inline bool PerceptionConfig::od_enabled() const {
  // @@protoc_insertion_point(field_get:PerceptionConfig.od_enabled)
  return _internal_od_enabled();
}
inline void PerceptionConfig::_internal_set_od_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  od_enabled_ = value;
}
inline void PerceptionConfig::set_od_enabled(bool value) {
  _internal_set_od_enabled(value);
  // @@protoc_insertion_point(field_set:PerceptionConfig.od_enabled)
}

// optional bool uss_enabled = 5 [default = false];
inline bool PerceptionConfig::_internal_has_uss_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerceptionConfig::has_uss_enabled() const {
  return _internal_has_uss_enabled();
}
inline void PerceptionConfig::clear_uss_enabled() {
  uss_enabled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PerceptionConfig::_internal_uss_enabled() const {
  return uss_enabled_;
}
inline bool PerceptionConfig::uss_enabled() const {
  // @@protoc_insertion_point(field_get:PerceptionConfig.uss_enabled)
  return _internal_uss_enabled();
}
inline void PerceptionConfig::_internal_set_uss_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  uss_enabled_ = value;
}
inline void PerceptionConfig::set_uss_enabled(bool value) {
  _internal_set_uss_enabled(value);
  // @@protoc_insertion_point(field_set:PerceptionConfig.uss_enabled)
}

// optional bool od3d_enabled = 6 [default = false];
inline bool PerceptionConfig::_internal_has_od3d_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PerceptionConfig::has_od3d_enabled() const {
  return _internal_has_od3d_enabled();
}
inline void PerceptionConfig::clear_od3d_enabled() {
  od3d_enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PerceptionConfig::_internal_od3d_enabled() const {
  return od3d_enabled_;
}
inline bool PerceptionConfig::od3d_enabled() const {
  // @@protoc_insertion_point(field_get:PerceptionConfig.od3d_enabled)
  return _internal_od3d_enabled();
}
inline void PerceptionConfig::_internal_set_od3d_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  od3d_enabled_ = value;
}
inline void PerceptionConfig::set_od3d_enabled(bool value) {
  _internal_set_od3d_enabled(value);
  // @@protoc_insertion_point(field_set:PerceptionConfig.od3d_enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_perception_5fconfig_2eproto
