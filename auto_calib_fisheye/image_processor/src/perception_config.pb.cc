// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_config.proto

#include "perception_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ImageProcessorConfig::ImageProcessorConfig(
    ::_pbi::ConstantInitialized)
  : frag_shader_(nullptr, ::_pbi::ConstantInitialized{})
  , vert_shader_(nullptr, ::_pbi::ConstantInitialized{})
  , seg_frag_shader_(nullptr, ::_pbi::ConstantInitialized{})
  , seg_vert_shader_(nullptr, ::_pbi::ConstantInitialized{})
  , model_name_(nullptr, ::_pbi::ConstantInitialized{})
  , texture_tv_image_0_(nullptr, ::_pbi::ConstantInitialized{})
  , texture_tv_image_1_(nullptr, ::_pbi::ConstantInitialized{})
  , texture_tv_image_2_(nullptr, ::_pbi::ConstantInitialized{})
  , texture_tv_image_3_(nullptr, ::_pbi::ConstantInitialized{})
  , calib_info_0_(nullptr, ::_pbi::ConstantInitialized{})
  , calib_info_1_(nullptr, ::_pbi::ConstantInitialized{})
  , calib_info_2_(nullptr, ::_pbi::ConstantInitialized{})
  , calib_info_3_(nullptr, ::_pbi::ConstantInitialized{})
  , calib_dir_(nullptr, ::_pbi::ConstantInitialized{})
  , cuda_enabled_(false)
  , min_diff_thresh_(int64_t{10})
  , queue_size_(5)
  , cached_indices_(1){}
struct ImageProcessorConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageProcessorConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageProcessorConfigDefaultTypeInternal() {}
  union {
    ImageProcessorConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageProcessorConfigDefaultTypeInternal _ImageProcessorConfig_default_instance_;
PROTOBUF_CONSTEXPR SpaceDetectorConfig::SpaceDetectorConfig(
    ::_pbi::ConstantInitialized)
  : model_path_(nullptr, ::_pbi::ConstantInitialized{})
  , camera_json_data_(nullptr, ::_pbi::ConstantInitialized{})
  , alpha_front_(nullptr, ::_pbi::ConstantInitialized{})
  , alpha_rear_(nullptr, ::_pbi::ConstantInitialized{})
  , roi_mask_front_(nullptr, ::_pbi::ConstantInitialized{})
  , roi_mask_rear_(nullptr, ::_pbi::ConstantInitialized{})
  , roi_mask_left_(nullptr, ::_pbi::ConstantInitialized{})
  , roi_mask_right_(nullptr, ::_pbi::ConstantInitialized{}){}
struct SpaceDetectorConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpaceDetectorConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpaceDetectorConfigDefaultTypeInternal() {}
  union {
    SpaceDetectorConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpaceDetectorConfigDefaultTypeInternal _SpaceDetectorConfig_default_instance_;
PROTOBUF_CONSTEXPR USSHandlerConfig::USSHandlerConfig(
    ::_pbi::ConstantInitialized)
  : cached_indices_(1)
  , min_diff_thresh_(int64_t{10})
  , num_topics_(12)
  , queue_size_(5){}
struct USSHandlerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR USSHandlerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~USSHandlerConfigDefaultTypeInternal() {}
  union {
    USSHandlerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 USSHandlerConfigDefaultTypeInternal _USSHandlerConfig_default_instance_;
PROTOBUF_CONSTEXPR PerceptionConfig::PerceptionConfig(
    ::_pbi::ConstantInitialized)
  : imgproc_config_(nullptr)
  , spdet_config_(nullptr)
  , usshandler_config_(nullptr)
  , od_enabled_(false)
  , uss_enabled_(false)
  , od3d_enabled_(false){}
struct PerceptionConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerceptionConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerceptionConfigDefaultTypeInternal() {}
  union {
    PerceptionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerceptionConfigDefaultTypeInternal _PerceptionConfig_default_instance_;
static ::_pb::Metadata file_level_metadata_perception_5fconfig_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_perception_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_perception_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_perception_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, frag_shader_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, vert_shader_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, seg_frag_shader_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, seg_vert_shader_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, model_name_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, texture_tv_image_0_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, texture_tv_image_1_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, texture_tv_image_2_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, texture_tv_image_3_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, calib_info_0_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, calib_info_1_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, calib_info_2_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, calib_info_3_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, min_diff_thresh_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, queue_size_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, cached_indices_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, calib_dir_),
  PROTOBUF_FIELD_OFFSET(::ImageProcessorConfig, cuda_enabled_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  15,
  16,
  17,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::SpaceDetectorConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SpaceDetectorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SpaceDetectorConfig, model_path_),
  PROTOBUF_FIELD_OFFSET(::SpaceDetectorConfig, camera_json_data_),
  PROTOBUF_FIELD_OFFSET(::SpaceDetectorConfig, alpha_front_),
  PROTOBUF_FIELD_OFFSET(::SpaceDetectorConfig, alpha_rear_),
  PROTOBUF_FIELD_OFFSET(::SpaceDetectorConfig, roi_mask_front_),
  PROTOBUF_FIELD_OFFSET(::SpaceDetectorConfig, roi_mask_rear_),
  PROTOBUF_FIELD_OFFSET(::SpaceDetectorConfig, roi_mask_left_),
  PROTOBUF_FIELD_OFFSET(::SpaceDetectorConfig, roi_mask_right_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::USSHandlerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::USSHandlerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::USSHandlerConfig, num_topics_),
  PROTOBUF_FIELD_OFFSET(::USSHandlerConfig, min_diff_thresh_),
  PROTOBUF_FIELD_OFFSET(::USSHandlerConfig, queue_size_),
  PROTOBUF_FIELD_OFFSET(::USSHandlerConfig, cached_indices_),
  2,
  1,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::PerceptionConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PerceptionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PerceptionConfig, imgproc_config_),
  PROTOBUF_FIELD_OFFSET(::PerceptionConfig, spdet_config_),
  PROTOBUF_FIELD_OFFSET(::PerceptionConfig, usshandler_config_),
  PROTOBUF_FIELD_OFFSET(::PerceptionConfig, od_enabled_),
  PROTOBUF_FIELD_OFFSET(::PerceptionConfig, uss_enabled_),
  PROTOBUF_FIELD_OFFSET(::PerceptionConfig, od3d_enabled_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, -1, sizeof(::ImageProcessorConfig)},
  { 42, 56, -1, sizeof(::SpaceDetectorConfig)},
  { 64, 74, -1, sizeof(::USSHandlerConfig)},
  { 78, 90, -1, sizeof(::PerceptionConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ImageProcessorConfig_default_instance_._instance,
  &::_SpaceDetectorConfig_default_instance_._instance,
  &::_USSHandlerConfig_default_instance_._instance,
  &::_PerceptionConfig_default_instance_._instance,
};

const char descriptor_table_protodef_perception_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027perception_config.proto\"\304\t\n\024ImageProce"
  "ssorConfig\022O\n\013frag_shader\030\001 \001(\t::data/pe"
  "rception/calibs/simulation/BowlFragShade"
  "r_16_18.fsh\022O\n\013vert_shader\030\002 \001(\t::data/p"
  "erception/calibs/simulation/BowlVertShad"
  "er_16_18.vsh\022M\n\017seg_frag_shader\030\003 \001(\t:4d"
  "ata/perception/calibs/simulation/Segment"
  "TopView.fsh\022M\n\017seg_vert_shader\030\004 \001(\t:4da"
  "ta/perception/calibs/simulation/SegmentT"
  "opView.vsh\022Q\n\nmodel_name\030\005 \001(\t:=data/per"
  "ception/calibs/simulation/Bowl_topview_v"
  "er1_16_18.obj\022L\n\022texture_tv_image_0\030\006 \001("
  "\t:0data/perception/calibs/simulation/alp"
  "ha_TV_0.png\022L\n\022texture_tv_image_1\030\007 \001(\t:"
  "0data/perception/calibs/simulation/alpha"
  "_TV_1.png\022L\n\022texture_tv_image_2\030\010 \001(\t:0d"
  "ata/perception/calibs/simulation/alpha_T"
  "V_2.png\022L\n\022texture_tv_image_3\030\t \001(\t:0dat"
  "a/perception/calibs/simulation/alpha_TV_"
  "3.png\022N\n\014calib_info_0\030\n \001(\t:8data/percep"
  "tion/calibs/simulation/calib_cam0_topvie"
  "w.txt\022N\n\014calib_info_1\030\013 \001(\t:8data/percep"
  "tion/calibs/simulation/calib_cam1_topvie"
  "w.txt\022N\n\014calib_info_2\030\014 \001(\t:8data/percep"
  "tion/calibs/simulation/calib_cam2_topvie"
  "w.txt\022N\n\014calib_info_3\030\r \001(\t:8data/percep"
  "tion/calibs/simulation/calib_cam3_topvie"
  "w.txt\022\033\n\017min_diff_thresh\030\016 \001(\003:\00210\022\025\n\nqu"
  "eue_size\030\017 \001(\005:\0015\022\031\n\016cached_indices\030\020 \001("
  "\005:\0011\0225\n\tcalib_dir\030\021 \001(\t:\"data/perception"
  "/calibs/simulation/\022\033\n\014cuda_enabled\030\022 \001("
  "\010:\005false\"\303\004\n\023SpaceDetectorConfig\0222\n\nmode"
  "l_path\030\001 \001(\t:\036data/perception/model_weig"
  "hts/\022K\n\020camera_json_data\030\002 \001(\t:1data/per"
  "ception/calibs/simulation/cameraData.jso"
  "n\022B\n\013alpha_front\030\003 \001(\t:-data/perception/"
  "calibs/simulation/alpha_1.png\022A\n\nalpha_r"
  "ear\030\004 \001(\t:-data/perception/calibs/simula"
  "tion/alpha_2.png\022H\n\016roi_mask_front\030\005 \001(\t"
  ":0data/perception/calibs/simulation/roi_"
  "mask_1.png\022G\n\rroi_mask_rear\030\006 \001(\t:0data/"
  "perception/calibs/simulation/roi_mask_2."
  "png\022G\n\rroi_mask_left\030\007 \001(\t:0data/percept"
  "ion/calibs/simulation/roi_mask_0.png\022H\n\016"
  "roi_mask_right\030\010 \001(\t:0data/perception/ca"
  "libs/simulation/roi_mask_3.png\"y\n\020USSHan"
  "dlerConfig\022\026\n\nnum_topics\030\001 \001(\005:\00212\022\033\n\017mi"
  "n_diff_thresh\030\002 \001(\003:\00210\022\025\n\nqueue_size\030\003 "
  "\001(\005:\0015\022\031\n\016cached_indices\030\004 \001(\005:\0011\"\357\001\n\020Pe"
  "rceptionConfig\022-\n\016imgproc_config\030\001 \001(\0132\025"
  ".ImageProcessorConfig\022*\n\014spdet_config\030\002 "
  "\001(\0132\024.SpaceDetectorConfig\022,\n\021usshandler_"
  "config\030\003 \001(\0132\021.USSHandlerConfig\022\031\n\nod_en"
  "abled\030\004 \001(\010:\005false\022\032\n\013uss_enabled\030\005 \001(\010:"
  "\005false\022\033\n\014od3d_enabled\030\006 \001(\010:\005false"
  ;
static ::_pbi::once_flag descriptor_table_perception_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_perception_5fconfig_2eproto = {
    false, false, 2195, descriptor_table_protodef_perception_5fconfig_2eproto,
    "perception_config.proto",
    &descriptor_table_perception_5fconfig_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_perception_5fconfig_2eproto::offsets,
    file_level_metadata_perception_5fconfig_2eproto, file_level_enum_descriptors_perception_5fconfig_2eproto,
    file_level_service_descriptors_perception_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_perception_5fconfig_2eproto_getter() {
  return &descriptor_table_perception_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_perception_5fconfig_2eproto(&descriptor_table_perception_5fconfig_2eproto);

// ===================================================================

class ImageProcessorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageProcessorConfig>()._has_bits_);
  static void set_has_frag_shader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vert_shader(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seg_frag_shader(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seg_vert_shader(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_model_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_texture_tv_image_0(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_texture_tv_image_1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_texture_tv_image_2(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_texture_tv_image_3(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_calib_info_0(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_calib_info_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_calib_info_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_calib_info_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_min_diff_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_queue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_cached_indices(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_calib_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_cuda_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_frag_shader_{{{"data/perception/calibs/simulation/BowlFragShader_16_18.fsh", 58}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_vert_shader_{{{"data/perception/calibs/simulation/BowlVertShader_16_18.vsh", 58}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_seg_frag_shader_{{{"data/perception/calibs/simulation/SegmentTopView.fsh", 52}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_seg_vert_shader_{{{"data/perception/calibs/simulation/SegmentTopView.vsh", 52}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_model_name_{{{"data/perception/calibs/simulation/Bowl_topview_ver1_16_18.obj", 61}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_0_{{{"data/perception/calibs/simulation/alpha_TV_0.png", 48}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_1_{{{"data/perception/calibs/simulation/alpha_TV_1.png", 48}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_2_{{{"data/perception/calibs/simulation/alpha_TV_2.png", 48}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_3_{{{"data/perception/calibs/simulation/alpha_TV_3.png", 48}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_0_{{{"data/perception/calibs/simulation/calib_cam0_topview.txt", 56}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_1_{{{"data/perception/calibs/simulation/calib_cam1_topview.txt", 56}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_2_{{{"data/perception/calibs/simulation/calib_cam2_topview.txt", 56}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_3_{{{"data/perception/calibs/simulation/calib_cam3_topview.txt", 56}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_dir_{{{"data/perception/calibs/simulation/", 34}}, {nullptr}};
ImageProcessorConfig::ImageProcessorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ImageProcessorConfig)
}
ImageProcessorConfig::ImageProcessorConfig(const ImageProcessorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frag_shader_.InitDefault();
  if (from._internal_has_frag_shader()) {
    frag_shader_.Set(from._internal_frag_shader(), 
      GetArenaForAllocation());
  }
  vert_shader_.InitDefault();
  if (from._internal_has_vert_shader()) {
    vert_shader_.Set(from._internal_vert_shader(), 
      GetArenaForAllocation());
  }
  seg_frag_shader_.InitDefault();
  if (from._internal_has_seg_frag_shader()) {
    seg_frag_shader_.Set(from._internal_seg_frag_shader(), 
      GetArenaForAllocation());
  }
  seg_vert_shader_.InitDefault();
  if (from._internal_has_seg_vert_shader()) {
    seg_vert_shader_.Set(from._internal_seg_vert_shader(), 
      GetArenaForAllocation());
  }
  model_name_.InitDefault();
  if (from._internal_has_model_name()) {
    model_name_.Set(from._internal_model_name(), 
      GetArenaForAllocation());
  }
  texture_tv_image_0_.InitDefault();
  if (from._internal_has_texture_tv_image_0()) {
    texture_tv_image_0_.Set(from._internal_texture_tv_image_0(), 
      GetArenaForAllocation());
  }
  texture_tv_image_1_.InitDefault();
  if (from._internal_has_texture_tv_image_1()) {
    texture_tv_image_1_.Set(from._internal_texture_tv_image_1(), 
      GetArenaForAllocation());
  }
  texture_tv_image_2_.InitDefault();
  if (from._internal_has_texture_tv_image_2()) {
    texture_tv_image_2_.Set(from._internal_texture_tv_image_2(), 
      GetArenaForAllocation());
  }
  texture_tv_image_3_.InitDefault();
  if (from._internal_has_texture_tv_image_3()) {
    texture_tv_image_3_.Set(from._internal_texture_tv_image_3(), 
      GetArenaForAllocation());
  }
  calib_info_0_.InitDefault();
  if (from._internal_has_calib_info_0()) {
    calib_info_0_.Set(from._internal_calib_info_0(), 
      GetArenaForAllocation());
  }
  calib_info_1_.InitDefault();
  if (from._internal_has_calib_info_1()) {
    calib_info_1_.Set(from._internal_calib_info_1(), 
      GetArenaForAllocation());
  }
  calib_info_2_.InitDefault();
  if (from._internal_has_calib_info_2()) {
    calib_info_2_.Set(from._internal_calib_info_2(), 
      GetArenaForAllocation());
  }
  calib_info_3_.InitDefault();
  if (from._internal_has_calib_info_3()) {
    calib_info_3_.Set(from._internal_calib_info_3(), 
      GetArenaForAllocation());
  }
  calib_dir_.InitDefault();
  if (from._internal_has_calib_dir()) {
    calib_dir_.Set(from._internal_calib_dir(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cuda_enabled_, &from.cuda_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&cached_indices_) -
    reinterpret_cast<char*>(&cuda_enabled_)) + sizeof(cached_indices_));
  // @@protoc_insertion_point(copy_constructor:ImageProcessorConfig)
}

inline void ImageProcessorConfig::SharedCtor() {
frag_shader_.InitDefault();
vert_shader_.InitDefault();
seg_frag_shader_.InitDefault();
seg_vert_shader_.InitDefault();
model_name_.InitDefault();
texture_tv_image_0_.InitDefault();
texture_tv_image_1_.InitDefault();
texture_tv_image_2_.InitDefault();
texture_tv_image_3_.InitDefault();
calib_info_0_.InitDefault();
calib_info_1_.InitDefault();
calib_info_2_.InitDefault();
calib_info_3_.InitDefault();
calib_dir_.InitDefault();
cuda_enabled_ = false;
min_diff_thresh_ = int64_t{10};
queue_size_ = 5;
cached_indices_ = 1;
}

ImageProcessorConfig::~ImageProcessorConfig() {
  // @@protoc_insertion_point(destructor:ImageProcessorConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageProcessorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frag_shader_.Destroy();
  vert_shader_.Destroy();
  seg_frag_shader_.Destroy();
  seg_vert_shader_.Destroy();
  model_name_.Destroy();
  texture_tv_image_0_.Destroy();
  texture_tv_image_1_.Destroy();
  texture_tv_image_2_.Destroy();
  texture_tv_image_3_.Destroy();
  calib_info_0_.Destroy();
  calib_info_1_.Destroy();
  calib_info_2_.Destroy();
  calib_info_3_.Destroy();
  calib_dir_.Destroy();
}

void ImageProcessorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageProcessorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageProcessorConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      frag_shader_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_frag_shader_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      vert_shader_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_vert_shader_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      seg_frag_shader_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_seg_frag_shader_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      seg_vert_shader_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_seg_vert_shader_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      model_name_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_model_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      texture_tv_image_0_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_0_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000040u) {
      texture_tv_image_1_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_1_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000080u) {
      texture_tv_image_2_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_2_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      texture_tv_image_3_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_texture_tv_image_3_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000200u) {
      calib_info_0_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_0_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000400u) {
      calib_info_1_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_1_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000800u) {
      calib_info_2_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_2_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00001000u) {
      calib_info_3_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_info_3_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00002000u) {
      calib_dir_.ClearToDefault(::ImageProcessorConfig::_i_give_permission_to_break_this_code_default_calib_dir_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x0000c000u) {
    cuda_enabled_ = false;
    min_diff_thresh_ = int64_t{10};
  }
  if (cached_has_bits & 0x00030000u) {
    queue_size_ = 5;
    cached_indices_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageProcessorConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string frag_shader = 1 [default = "data/perception/calibs/simulation/BowlFragShader_16_18.fsh"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_frag_shader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.frag_shader");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string vert_shader = 2 [default = "data/perception/calibs/simulation/BowlVertShader_16_18.vsh"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vert_shader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.vert_shader");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string seg_frag_shader = 3 [default = "data/perception/calibs/simulation/SegmentTopView.fsh"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_seg_frag_shader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.seg_frag_shader");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string seg_vert_shader = 4 [default = "data/perception/calibs/simulation/SegmentTopView.vsh"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_seg_vert_shader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.seg_vert_shader");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string model_name = 5 [default = "data/perception/calibs/simulation/Bowl_topview_ver1_16_18.obj"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.model_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string texture_tv_image_0 = 6 [default = "data/perception/calibs/simulation/alpha_TV_0.png"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_texture_tv_image_0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.texture_tv_image_0");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string texture_tv_image_1 = 7 [default = "data/perception/calibs/simulation/alpha_TV_1.png"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_texture_tv_image_1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.texture_tv_image_1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string texture_tv_image_2 = 8 [default = "data/perception/calibs/simulation/alpha_TV_2.png"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_texture_tv_image_2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.texture_tv_image_2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string texture_tv_image_3 = 9 [default = "data/perception/calibs/simulation/alpha_TV_3.png"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_texture_tv_image_3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.texture_tv_image_3");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string calib_info_0 = 10 [default = "data/perception/calibs/simulation/calib_cam0_topview.txt"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_calib_info_0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.calib_info_0");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string calib_info_1 = 11 [default = "data/perception/calibs/simulation/calib_cam1_topview.txt"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_calib_info_1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.calib_info_1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string calib_info_2 = 12 [default = "data/perception/calibs/simulation/calib_cam2_topview.txt"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_calib_info_2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.calib_info_2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string calib_info_3 = 13 [default = "data/perception/calibs/simulation/calib_cam3_topview.txt"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_calib_info_3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.calib_info_3");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 min_diff_thresh = 14 [default = 10];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_min_diff_thresh(&has_bits);
          min_diff_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 queue_size = 15 [default = 5];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_queue_size(&has_bits);
          queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cached_indices = 16 [default = 1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_cached_indices(&has_bits);
          cached_indices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string calib_dir = 17 [default = "data/perception/calibs/simulation/"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_calib_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ImageProcessorConfig.calib_dir");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool cuda_enabled = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_cuda_enabled(&has_bits);
          cuda_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageProcessorConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageProcessorConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string frag_shader = 1 [default = "data/perception/calibs/simulation/BowlFragShader_16_18.fsh"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frag_shader().data(), static_cast<int>(this->_internal_frag_shader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.frag_shader");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frag_shader(), target);
  }

  // optional string vert_shader = 2 [default = "data/perception/calibs/simulation/BowlVertShader_16_18.vsh"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vert_shader().data(), static_cast<int>(this->_internal_vert_shader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.vert_shader");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vert_shader(), target);
  }

  // optional string seg_frag_shader = 3 [default = "data/perception/calibs/simulation/SegmentTopView.fsh"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_seg_frag_shader().data(), static_cast<int>(this->_internal_seg_frag_shader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.seg_frag_shader");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_seg_frag_shader(), target);
  }

  // optional string seg_vert_shader = 4 [default = "data/perception/calibs/simulation/SegmentTopView.vsh"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_seg_vert_shader().data(), static_cast<int>(this->_internal_seg_vert_shader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.seg_vert_shader");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_seg_vert_shader(), target);
  }

  // optional string model_name = 5 [default = "data/perception/calibs/simulation/Bowl_topview_ver1_16_18.obj"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.model_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_model_name(), target);
  }

  // optional string texture_tv_image_0 = 6 [default = "data/perception/calibs/simulation/alpha_TV_0.png"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_texture_tv_image_0().data(), static_cast<int>(this->_internal_texture_tv_image_0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.texture_tv_image_0");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_texture_tv_image_0(), target);
  }

  // optional string texture_tv_image_1 = 7 [default = "data/perception/calibs/simulation/alpha_TV_1.png"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_texture_tv_image_1().data(), static_cast<int>(this->_internal_texture_tv_image_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.texture_tv_image_1");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_texture_tv_image_1(), target);
  }

  // optional string texture_tv_image_2 = 8 [default = "data/perception/calibs/simulation/alpha_TV_2.png"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_texture_tv_image_2().data(), static_cast<int>(this->_internal_texture_tv_image_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.texture_tv_image_2");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_texture_tv_image_2(), target);
  }

  // optional string texture_tv_image_3 = 9 [default = "data/perception/calibs/simulation/alpha_TV_3.png"];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_texture_tv_image_3().data(), static_cast<int>(this->_internal_texture_tv_image_3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.texture_tv_image_3");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_texture_tv_image_3(), target);
  }

  // optional string calib_info_0 = 10 [default = "data/perception/calibs/simulation/calib_cam0_topview.txt"];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calib_info_0().data(), static_cast<int>(this->_internal_calib_info_0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.calib_info_0");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_calib_info_0(), target);
  }

  // optional string calib_info_1 = 11 [default = "data/perception/calibs/simulation/calib_cam1_topview.txt"];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calib_info_1().data(), static_cast<int>(this->_internal_calib_info_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.calib_info_1");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_calib_info_1(), target);
  }

  // optional string calib_info_2 = 12 [default = "data/perception/calibs/simulation/calib_cam2_topview.txt"];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calib_info_2().data(), static_cast<int>(this->_internal_calib_info_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.calib_info_2");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_calib_info_2(), target);
  }

  // optional string calib_info_3 = 13 [default = "data/perception/calibs/simulation/calib_cam3_topview.txt"];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calib_info_3().data(), static_cast<int>(this->_internal_calib_info_3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.calib_info_3");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_calib_info_3(), target);
  }

  // optional int64 min_diff_thresh = 14 [default = 10];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_min_diff_thresh(), target);
  }

  // optional int32 queue_size = 15 [default = 5];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_queue_size(), target);
  }

  // optional int32 cached_indices = 16 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_cached_indices(), target);
  }

  // optional string calib_dir = 17 [default = "data/perception/calibs/simulation/"];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calib_dir().data(), static_cast<int>(this->_internal_calib_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ImageProcessorConfig.calib_dir");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_calib_dir(), target);
  }

  // optional bool cuda_enabled = 18 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_cuda_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageProcessorConfig)
  return target;
}

size_t ImageProcessorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageProcessorConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string frag_shader = 1 [default = "data/perception/calibs/simulation/BowlFragShader_16_18.fsh"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frag_shader());
    }

    // optional string vert_shader = 2 [default = "data/perception/calibs/simulation/BowlVertShader_16_18.vsh"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vert_shader());
    }

    // optional string seg_frag_shader = 3 [default = "data/perception/calibs/simulation/SegmentTopView.fsh"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_seg_frag_shader());
    }

    // optional string seg_vert_shader = 4 [default = "data/perception/calibs/simulation/SegmentTopView.vsh"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_seg_vert_shader());
    }

    // optional string model_name = 5 [default = "data/perception/calibs/simulation/Bowl_topview_ver1_16_18.obj"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_name());
    }

    // optional string texture_tv_image_0 = 6 [default = "data/perception/calibs/simulation/alpha_TV_0.png"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_texture_tv_image_0());
    }

    // optional string texture_tv_image_1 = 7 [default = "data/perception/calibs/simulation/alpha_TV_1.png"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_texture_tv_image_1());
    }

    // optional string texture_tv_image_2 = 8 [default = "data/perception/calibs/simulation/alpha_TV_2.png"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_texture_tv_image_2());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string texture_tv_image_3 = 9 [default = "data/perception/calibs/simulation/alpha_TV_3.png"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_texture_tv_image_3());
    }

    // optional string calib_info_0 = 10 [default = "data/perception/calibs/simulation/calib_cam0_topview.txt"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calib_info_0());
    }

    // optional string calib_info_1 = 11 [default = "data/perception/calibs/simulation/calib_cam1_topview.txt"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calib_info_1());
    }

    // optional string calib_info_2 = 12 [default = "data/perception/calibs/simulation/calib_cam2_topview.txt"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calib_info_2());
    }

    // optional string calib_info_3 = 13 [default = "data/perception/calibs/simulation/calib_cam3_topview.txt"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calib_info_3());
    }

    // optional string calib_dir = 17 [default = "data/perception/calibs/simulation/"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calib_dir());
    }

    // optional bool cuda_enabled = 18 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional int64 min_diff_thresh = 14 [default = 10];
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_min_diff_thresh());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional int32 queue_size = 15 [default = 5];
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_queue_size());
    }

    // optional int32 cached_indices = 16 [default = 1];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_cached_indices());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageProcessorConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageProcessorConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageProcessorConfig::GetClassData() const { return &_class_data_; }

void ImageProcessorConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageProcessorConfig *>(to)->MergeFrom(
      static_cast<const ImageProcessorConfig &>(from));
}


void ImageProcessorConfig::MergeFrom(const ImageProcessorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageProcessorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_frag_shader(from._internal_frag_shader());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_vert_shader(from._internal_vert_shader());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_seg_frag_shader(from._internal_seg_frag_shader());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_seg_vert_shader(from._internal_seg_vert_shader());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_model_name(from._internal_model_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_texture_tv_image_0(from._internal_texture_tv_image_0());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_texture_tv_image_1(from._internal_texture_tv_image_1());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_texture_tv_image_2(from._internal_texture_tv_image_2());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_texture_tv_image_3(from._internal_texture_tv_image_3());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_calib_info_0(from._internal_calib_info_0());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_calib_info_1(from._internal_calib_info_1());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_calib_info_2(from._internal_calib_info_2());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_calib_info_3(from._internal_calib_info_3());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_calib_dir(from._internal_calib_dir());
    }
    if (cached_has_bits & 0x00004000u) {
      cuda_enabled_ = from.cuda_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      min_diff_thresh_ = from.min_diff_thresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      queue_size_ = from.queue_size_;
    }
    if (cached_has_bits & 0x00020000u) {
      cached_indices_ = from.cached_indices_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageProcessorConfig::CopyFrom(const ImageProcessorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageProcessorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageProcessorConfig::IsInitialized() const {
  return true;
}

void ImageProcessorConfig::InternalSwap(ImageProcessorConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &frag_shader_, lhs_arena,
      &other->frag_shader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vert_shader_, lhs_arena,
      &other->vert_shader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seg_frag_shader_, lhs_arena,
      &other->seg_frag_shader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seg_vert_shader_, lhs_arena,
      &other->seg_vert_shader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &model_name_, lhs_arena,
      &other->model_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &texture_tv_image_0_, lhs_arena,
      &other->texture_tv_image_0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &texture_tv_image_1_, lhs_arena,
      &other->texture_tv_image_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &texture_tv_image_2_, lhs_arena,
      &other->texture_tv_image_2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &texture_tv_image_3_, lhs_arena,
      &other->texture_tv_image_3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &calib_info_0_, lhs_arena,
      &other->calib_info_0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &calib_info_1_, lhs_arena,
      &other->calib_info_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &calib_info_2_, lhs_arena,
      &other->calib_info_2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &calib_info_3_, lhs_arena,
      &other->calib_info_3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &calib_dir_, lhs_arena,
      &other->calib_dir_, rhs_arena
  );
  swap(cuda_enabled_, other->cuda_enabled_);
  swap(min_diff_thresh_, other->min_diff_thresh_);
  swap(queue_size_, other->queue_size_);
  swap(cached_indices_, other->cached_indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageProcessorConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_perception_5fconfig_2eproto_getter, &descriptor_table_perception_5fconfig_2eproto_once,
      file_level_metadata_perception_5fconfig_2eproto[0]);
}

// ===================================================================

class SpaceDetectorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SpaceDetectorConfig>()._has_bits_);
  static void set_has_model_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_camera_json_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alpha_front(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_alpha_rear(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_roi_mask_front(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_roi_mask_rear(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_roi_mask_left(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_roi_mask_right(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_model_path_{{{"data/perception/model_weights/", 30}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_camera_json_data_{{{"data/perception/calibs/simulation/cameraData.json", 49}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_alpha_front_{{{"data/perception/calibs/simulation/alpha_1.png", 45}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_alpha_rear_{{{"data/perception/calibs/simulation/alpha_2.png", 45}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_front_{{{"data/perception/calibs/simulation/roi_mask_1.png", 48}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_rear_{{{"data/perception/calibs/simulation/roi_mask_2.png", 48}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_left_{{{"data/perception/calibs/simulation/roi_mask_0.png", 48}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_right_{{{"data/perception/calibs/simulation/roi_mask_3.png", 48}}, {nullptr}};
SpaceDetectorConfig::SpaceDetectorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SpaceDetectorConfig)
}
SpaceDetectorConfig::SpaceDetectorConfig(const SpaceDetectorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_path_.InitDefault();
  if (from._internal_has_model_path()) {
    model_path_.Set(from._internal_model_path(), 
      GetArenaForAllocation());
  }
  camera_json_data_.InitDefault();
  if (from._internal_has_camera_json_data()) {
    camera_json_data_.Set(from._internal_camera_json_data(), 
      GetArenaForAllocation());
  }
  alpha_front_.InitDefault();
  if (from._internal_has_alpha_front()) {
    alpha_front_.Set(from._internal_alpha_front(), 
      GetArenaForAllocation());
  }
  alpha_rear_.InitDefault();
  if (from._internal_has_alpha_rear()) {
    alpha_rear_.Set(from._internal_alpha_rear(), 
      GetArenaForAllocation());
  }
  roi_mask_front_.InitDefault();
  if (from._internal_has_roi_mask_front()) {
    roi_mask_front_.Set(from._internal_roi_mask_front(), 
      GetArenaForAllocation());
  }
  roi_mask_rear_.InitDefault();
  if (from._internal_has_roi_mask_rear()) {
    roi_mask_rear_.Set(from._internal_roi_mask_rear(), 
      GetArenaForAllocation());
  }
  roi_mask_left_.InitDefault();
  if (from._internal_has_roi_mask_left()) {
    roi_mask_left_.Set(from._internal_roi_mask_left(), 
      GetArenaForAllocation());
  }
  roi_mask_right_.InitDefault();
  if (from._internal_has_roi_mask_right()) {
    roi_mask_right_.Set(from._internal_roi_mask_right(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SpaceDetectorConfig)
}

inline void SpaceDetectorConfig::SharedCtor() {
model_path_.InitDefault();
camera_json_data_.InitDefault();
alpha_front_.InitDefault();
alpha_rear_.InitDefault();
roi_mask_front_.InitDefault();
roi_mask_rear_.InitDefault();
roi_mask_left_.InitDefault();
roi_mask_right_.InitDefault();
}

SpaceDetectorConfig::~SpaceDetectorConfig() {
  // @@protoc_insertion_point(destructor:SpaceDetectorConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpaceDetectorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_path_.Destroy();
  camera_json_data_.Destroy();
  alpha_front_.Destroy();
  alpha_rear_.Destroy();
  roi_mask_front_.Destroy();
  roi_mask_rear_.Destroy();
  roi_mask_left_.Destroy();
  roi_mask_right_.Destroy();
}

void SpaceDetectorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpaceDetectorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:SpaceDetectorConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      model_path_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_model_path_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      camera_json_data_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_camera_json_data_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      alpha_front_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_alpha_front_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      alpha_rear_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_alpha_rear_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      roi_mask_front_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_front_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      roi_mask_rear_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_rear_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000040u) {
      roi_mask_left_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_left_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000080u) {
      roi_mask_right_.ClearToDefault(::SpaceDetectorConfig::_i_give_permission_to_break_this_code_default_roi_mask_right_, GetArenaForAllocation());
       }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpaceDetectorConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string model_path = 1 [default = "data/perception/model_weights/"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SpaceDetectorConfig.model_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string camera_json_data = 2 [default = "data/perception/calibs/simulation/cameraData.json"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_camera_json_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SpaceDetectorConfig.camera_json_data");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string alpha_front = 3 [default = "data/perception/calibs/simulation/alpha_1.png"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_alpha_front();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SpaceDetectorConfig.alpha_front");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string alpha_rear = 4 [default = "data/perception/calibs/simulation/alpha_2.png"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_alpha_rear();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SpaceDetectorConfig.alpha_rear");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string roi_mask_front = 5 [default = "data/perception/calibs/simulation/roi_mask_1.png"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_roi_mask_front();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SpaceDetectorConfig.roi_mask_front");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string roi_mask_rear = 6 [default = "data/perception/calibs/simulation/roi_mask_2.png"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_roi_mask_rear();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SpaceDetectorConfig.roi_mask_rear");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string roi_mask_left = 7 [default = "data/perception/calibs/simulation/roi_mask_0.png"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_roi_mask_left();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SpaceDetectorConfig.roi_mask_left");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string roi_mask_right = 8 [default = "data/perception/calibs/simulation/roi_mask_3.png"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_roi_mask_right();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SpaceDetectorConfig.roi_mask_right");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpaceDetectorConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpaceDetectorConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string model_path = 1 [default = "data/perception/model_weights/"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_path().data(), static_cast<int>(this->_internal_model_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SpaceDetectorConfig.model_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_path(), target);
  }

  // optional string camera_json_data = 2 [default = "data/perception/calibs/simulation/cameraData.json"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_json_data().data(), static_cast<int>(this->_internal_camera_json_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SpaceDetectorConfig.camera_json_data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_json_data(), target);
  }

  // optional string alpha_front = 3 [default = "data/perception/calibs/simulation/alpha_1.png"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_alpha_front().data(), static_cast<int>(this->_internal_alpha_front().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SpaceDetectorConfig.alpha_front");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alpha_front(), target);
  }

  // optional string alpha_rear = 4 [default = "data/perception/calibs/simulation/alpha_2.png"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_alpha_rear().data(), static_cast<int>(this->_internal_alpha_rear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SpaceDetectorConfig.alpha_rear");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alpha_rear(), target);
  }

  // optional string roi_mask_front = 5 [default = "data/perception/calibs/simulation/roi_mask_1.png"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_roi_mask_front().data(), static_cast<int>(this->_internal_roi_mask_front().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SpaceDetectorConfig.roi_mask_front");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_roi_mask_front(), target);
  }

  // optional string roi_mask_rear = 6 [default = "data/perception/calibs/simulation/roi_mask_2.png"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_roi_mask_rear().data(), static_cast<int>(this->_internal_roi_mask_rear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SpaceDetectorConfig.roi_mask_rear");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_roi_mask_rear(), target);
  }

  // optional string roi_mask_left = 7 [default = "data/perception/calibs/simulation/roi_mask_0.png"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_roi_mask_left().data(), static_cast<int>(this->_internal_roi_mask_left().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SpaceDetectorConfig.roi_mask_left");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_roi_mask_left(), target);
  }

  // optional string roi_mask_right = 8 [default = "data/perception/calibs/simulation/roi_mask_3.png"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_roi_mask_right().data(), static_cast<int>(this->_internal_roi_mask_right().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SpaceDetectorConfig.roi_mask_right");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_roi_mask_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpaceDetectorConfig)
  return target;
}

size_t SpaceDetectorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpaceDetectorConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string model_path = 1 [default = "data/perception/model_weights/"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_path());
    }

    // optional string camera_json_data = 2 [default = "data/perception/calibs/simulation/cameraData.json"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_json_data());
    }

    // optional string alpha_front = 3 [default = "data/perception/calibs/simulation/alpha_1.png"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_alpha_front());
    }

    // optional string alpha_rear = 4 [default = "data/perception/calibs/simulation/alpha_2.png"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_alpha_rear());
    }

    // optional string roi_mask_front = 5 [default = "data/perception/calibs/simulation/roi_mask_1.png"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_roi_mask_front());
    }

    // optional string roi_mask_rear = 6 [default = "data/perception/calibs/simulation/roi_mask_2.png"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_roi_mask_rear());
    }

    // optional string roi_mask_left = 7 [default = "data/perception/calibs/simulation/roi_mask_0.png"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_roi_mask_left());
    }

    // optional string roi_mask_right = 8 [default = "data/perception/calibs/simulation/roi_mask_3.png"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_roi_mask_right());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpaceDetectorConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpaceDetectorConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpaceDetectorConfig::GetClassData() const { return &_class_data_; }

void SpaceDetectorConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpaceDetectorConfig *>(to)->MergeFrom(
      static_cast<const SpaceDetectorConfig &>(from));
}


void SpaceDetectorConfig::MergeFrom(const SpaceDetectorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpaceDetectorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model_path(from._internal_model_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_camera_json_data(from._internal_camera_json_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_alpha_front(from._internal_alpha_front());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_alpha_rear(from._internal_alpha_rear());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_roi_mask_front(from._internal_roi_mask_front());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_roi_mask_rear(from._internal_roi_mask_rear());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_roi_mask_left(from._internal_roi_mask_left());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_roi_mask_right(from._internal_roi_mask_right());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpaceDetectorConfig::CopyFrom(const SpaceDetectorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpaceDetectorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpaceDetectorConfig::IsInitialized() const {
  return true;
}

void SpaceDetectorConfig::InternalSwap(SpaceDetectorConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &model_path_, lhs_arena,
      &other->model_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &camera_json_data_, lhs_arena,
      &other->camera_json_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &alpha_front_, lhs_arena,
      &other->alpha_front_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &alpha_rear_, lhs_arena,
      &other->alpha_rear_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roi_mask_front_, lhs_arena,
      &other->roi_mask_front_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roi_mask_rear_, lhs_arena,
      &other->roi_mask_rear_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roi_mask_left_, lhs_arena,
      &other->roi_mask_left_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roi_mask_right_, lhs_arena,
      &other->roi_mask_right_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SpaceDetectorConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_perception_5fconfig_2eproto_getter, &descriptor_table_perception_5fconfig_2eproto_once,
      file_level_metadata_perception_5fconfig_2eproto[1]);
}

// ===================================================================

class USSHandlerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<USSHandlerConfig>()._has_bits_);
  static void set_has_num_topics(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_diff_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_queue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cached_indices(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

USSHandlerConfig::USSHandlerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:USSHandlerConfig)
}
USSHandlerConfig::USSHandlerConfig(const USSHandlerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cached_indices_, &from.cached_indices_,
    static_cast<size_t>(reinterpret_cast<char*>(&queue_size_) -
    reinterpret_cast<char*>(&cached_indices_)) + sizeof(queue_size_));
  // @@protoc_insertion_point(copy_constructor:USSHandlerConfig)
}

inline void USSHandlerConfig::SharedCtor() {
cached_indices_ = 1;
min_diff_thresh_ = int64_t{10};
num_topics_ = 12;
queue_size_ = 5;
}

USSHandlerConfig::~USSHandlerConfig() {
  // @@protoc_insertion_point(destructor:USSHandlerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void USSHandlerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void USSHandlerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void USSHandlerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:USSHandlerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    cached_indices_ = 1;
    min_diff_thresh_ = int64_t{10};
    num_topics_ = 12;
    queue_size_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USSHandlerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 num_topics = 1 [default = 12];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_topics(&has_bits);
          num_topics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 min_diff_thresh = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_min_diff_thresh(&has_bits);
          min_diff_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 queue_size = 3 [default = 5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_queue_size(&has_bits);
          queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cached_indices = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cached_indices(&has_bits);
          cached_indices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* USSHandlerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USSHandlerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_topics = 1 [default = 12];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_topics(), target);
  }

  // optional int64 min_diff_thresh = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_min_diff_thresh(), target);
  }

  // optional int32 queue_size = 3 [default = 5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_queue_size(), target);
  }

  // optional int32 cached_indices = 4 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cached_indices(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USSHandlerConfig)
  return target;
}

size_t USSHandlerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USSHandlerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 cached_indices = 4 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cached_indices());
    }

    // optional int64 min_diff_thresh = 2 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_min_diff_thresh());
    }

    // optional int32 num_topics = 1 [default = 12];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_topics());
    }

    // optional int32 queue_size = 3 [default = 5];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_queue_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData USSHandlerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    USSHandlerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*USSHandlerConfig::GetClassData() const { return &_class_data_; }

void USSHandlerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<USSHandlerConfig *>(to)->MergeFrom(
      static_cast<const USSHandlerConfig &>(from));
}


void USSHandlerConfig::MergeFrom(const USSHandlerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USSHandlerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      cached_indices_ = from.cached_indices_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_diff_thresh_ = from.min_diff_thresh_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_topics_ = from.num_topics_;
    }
    if (cached_has_bits & 0x00000008u) {
      queue_size_ = from.queue_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void USSHandlerConfig::CopyFrom(const USSHandlerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USSHandlerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USSHandlerConfig::IsInitialized() const {
  return true;
}

void USSHandlerConfig::InternalSwap(USSHandlerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cached_indices_, other->cached_indices_);
  swap(min_diff_thresh_, other->min_diff_thresh_);
  swap(num_topics_, other->num_topics_);
  swap(queue_size_, other->queue_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata USSHandlerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_perception_5fconfig_2eproto_getter, &descriptor_table_perception_5fconfig_2eproto_once,
      file_level_metadata_perception_5fconfig_2eproto[2]);
}

// ===================================================================

class PerceptionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PerceptionConfig>()._has_bits_);
  static const ::ImageProcessorConfig& imgproc_config(const PerceptionConfig* msg);
  static void set_has_imgproc_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SpaceDetectorConfig& spdet_config(const PerceptionConfig* msg);
  static void set_has_spdet_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::USSHandlerConfig& usshandler_config(const PerceptionConfig* msg);
  static void set_has_usshandler_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_od_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uss_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_od3d_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ImageProcessorConfig&
PerceptionConfig::_Internal::imgproc_config(const PerceptionConfig* msg) {
  return *msg->imgproc_config_;
}
const ::SpaceDetectorConfig&
PerceptionConfig::_Internal::spdet_config(const PerceptionConfig* msg) {
  return *msg->spdet_config_;
}
const ::USSHandlerConfig&
PerceptionConfig::_Internal::usshandler_config(const PerceptionConfig* msg) {
  return *msg->usshandler_config_;
}
PerceptionConfig::PerceptionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PerceptionConfig)
}
PerceptionConfig::PerceptionConfig(const PerceptionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_imgproc_config()) {
    imgproc_config_ = new ::ImageProcessorConfig(*from.imgproc_config_);
  } else {
    imgproc_config_ = nullptr;
  }
  if (from._internal_has_spdet_config()) {
    spdet_config_ = new ::SpaceDetectorConfig(*from.spdet_config_);
  } else {
    spdet_config_ = nullptr;
  }
  if (from._internal_has_usshandler_config()) {
    usshandler_config_ = new ::USSHandlerConfig(*from.usshandler_config_);
  } else {
    usshandler_config_ = nullptr;
  }
  ::memcpy(&od_enabled_, &from.od_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&od3d_enabled_) -
    reinterpret_cast<char*>(&od_enabled_)) + sizeof(od3d_enabled_));
  // @@protoc_insertion_point(copy_constructor:PerceptionConfig)
}

inline void PerceptionConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&imgproc_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&od3d_enabled_) -
    reinterpret_cast<char*>(&imgproc_config_)) + sizeof(od3d_enabled_));
}

PerceptionConfig::~PerceptionConfig() {
  // @@protoc_insertion_point(destructor:PerceptionConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerceptionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete imgproc_config_;
  if (this != internal_default_instance()) delete spdet_config_;
  if (this != internal_default_instance()) delete usshandler_config_;
}

void PerceptionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerceptionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PerceptionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(imgproc_config_ != nullptr);
      imgproc_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spdet_config_ != nullptr);
      spdet_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(usshandler_config_ != nullptr);
      usshandler_config_->Clear();
    }
  }
  ::memset(&od_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&od3d_enabled_) -
      reinterpret_cast<char*>(&od_enabled_)) + sizeof(od3d_enabled_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceptionConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ImageProcessorConfig imgproc_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_imgproc_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SpaceDetectorConfig spdet_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spdet_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .USSHandlerConfig usshandler_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_usshandler_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool od_enabled = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_od_enabled(&has_bits);
          od_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool uss_enabled = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_uss_enabled(&has_bits);
          uss_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool od3d_enabled = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_od3d_enabled(&has_bits);
          od3d_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerceptionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PerceptionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ImageProcessorConfig imgproc_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::imgproc_config(this),
        _Internal::imgproc_config(this).GetCachedSize(), target, stream);
  }

  // optional .SpaceDetectorConfig spdet_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spdet_config(this),
        _Internal::spdet_config(this).GetCachedSize(), target, stream);
  }

  // optional .USSHandlerConfig usshandler_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::usshandler_config(this),
        _Internal::usshandler_config(this).GetCachedSize(), target, stream);
  }

  // optional bool od_enabled = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_od_enabled(), target);
  }

  // optional bool uss_enabled = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_uss_enabled(), target);
  }

  // optional bool od3d_enabled = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_od3d_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PerceptionConfig)
  return target;
}

size_t PerceptionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PerceptionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .ImageProcessorConfig imgproc_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *imgproc_config_);
    }

    // optional .SpaceDetectorConfig spdet_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spdet_config_);
    }

    // optional .USSHandlerConfig usshandler_config = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *usshandler_config_);
    }

    // optional bool od_enabled = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool uss_enabled = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool od3d_enabled = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerceptionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerceptionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerceptionConfig::GetClassData() const { return &_class_data_; }

void PerceptionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PerceptionConfig *>(to)->MergeFrom(
      static_cast<const PerceptionConfig &>(from));
}


void PerceptionConfig::MergeFrom(const PerceptionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PerceptionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_imgproc_config()->::ImageProcessorConfig::MergeFrom(from._internal_imgproc_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spdet_config()->::SpaceDetectorConfig::MergeFrom(from._internal_spdet_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_usshandler_config()->::USSHandlerConfig::MergeFrom(from._internal_usshandler_config());
    }
    if (cached_has_bits & 0x00000008u) {
      od_enabled_ = from.od_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      uss_enabled_ = from.uss_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      od3d_enabled_ = from.od3d_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerceptionConfig::CopyFrom(const PerceptionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PerceptionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionConfig::IsInitialized() const {
  return true;
}

void PerceptionConfig::InternalSwap(PerceptionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerceptionConfig, od3d_enabled_)
      + sizeof(PerceptionConfig::od3d_enabled_)
      - PROTOBUF_FIELD_OFFSET(PerceptionConfig, imgproc_config_)>(
          reinterpret_cast<char*>(&imgproc_config_),
          reinterpret_cast<char*>(&other->imgproc_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptionConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_perception_5fconfig_2eproto_getter, &descriptor_table_perception_5fconfig_2eproto_once,
      file_level_metadata_perception_5fconfig_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ImageProcessorConfig*
Arena::CreateMaybeMessage< ::ImageProcessorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageProcessorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::SpaceDetectorConfig*
Arena::CreateMaybeMessage< ::SpaceDetectorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpaceDetectorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::USSHandlerConfig*
Arena::CreateMaybeMessage< ::USSHandlerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USSHandlerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::PerceptionConfig*
Arena::CreateMaybeMessage< ::PerceptionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PerceptionConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
